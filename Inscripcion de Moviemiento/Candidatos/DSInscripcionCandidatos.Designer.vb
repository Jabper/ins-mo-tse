'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSInscripcionCandidatos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSInscripcionCandidatos
    Inherits Global.System.Data.DataSet
    
    Private tableIM_CANDIDATOS As IM_CANDIDATOSDataTable
    
    Private tableIM_CANDIDATOS_PUEDEN_REPETIR As IM_CANDIDATOS_PUEDEN_REPETIRDataTable
    
    Private tableIM_CANDIDATOS_REPETIDOS As IM_CANDIDATOS_REPETIDOSDataTable
    
    Private tableIM_CARGOS_ELECTIVOS As IM_CARGOS_ELECTIVOSDataTable
    
    Private tableIM_DEPARTAMENTOS As IM_DEPARTAMENTOSDataTable
    
    Private tableIM_MUNICIPIOS As IM_MUNICIPIOSDataTable
    
    Private tableIM_MOVIMIENTOS As IM_MOVIMIENTOSDataTable
    
    Private tableIM_IMAGENES_CANDIDATO As IM_IMAGENES_CANDIDATODataTable
    
    Private tableIM_PARTIDOS_POLITICOS As IM_PARTIDOS_POLITICOSDataTable
    
    Private tableIM_NIVEL_ELECTIVO As IM_NIVEL_ELECTIVODataTable
    
    Private tableTA_CANDIDATOS As TA_CANDIDATOSDataTable
    
    Private tableIM_REQUISITOS_X_CANDIDATO As IM_REQUISITOS_X_CANDIDATODataTable
    
    Private tableIM_REQUISITOS As IM_REQUISITOSDataTable
    
    Private tableIM_REQUISITOS1 As IM_REQUISITOS1DataTable
    
    Private relationIM_FK2_CANDIDATOS As Global.System.Data.DataRelation
    
    Private relationIM_FK3_CANDIDATOS As Global.System.Data.DataRelation
    
    Private relationIM_FK4_CANDIDATOS As Global.System.Data.DataRelation
    
    Private relationIM_FK2_CAND_PUEDEN_REPETIR As Global.System.Data.DataRelation
    
    Private relationIM_FK2_CANDIDATOS_REPETIDOS As Global.System.Data.DataRelation
    
    Private relationIM_FK1_CARGOS_ELECTIVOS As Global.System.Data.DataRelation
    
    Private relationIM_FK1_MUNICIPIO As Global.System.Data.DataRelation
    
    Private relationIM_FK1_MOVIMIENTOS As Global.System.Data.DataRelation
    
    Private relationIM_FK1_IMAGENES_CANDIDATO As Global.System.Data.DataRelation
    
    Private relationIM_FK1_IMAGENES_CANDIDATO1 As Global.System.Data.DataRelation
    
    Private relationIM_FK2_CANDIDATOS1 As Global.System.Data.DataRelation
    
    Private relationIM_FK3_CANDIDATOS1 As Global.System.Data.DataRelation
    
    Private relationIM_FK4_CANDIDATOS1 As Global.System.Data.DataRelation
    
    Private relationIM_FK1_REQUISITOS_X_CANDIDATO As Global.System.Data.DataRelation
    
    Private relationIM_FK3_REQUISITOS_X_CANDIDATO As Global.System.Data.DataRelation
    
    Private relationIM_FK1_REQUISITOS As Global.System.Data.DataRelation
    
    Private relationIM_FK4_REQUISITOS_X_CANDIDATO As Global.System.Data.DataRelation
    
    Private relationIM_FK2_IMAGENES_CANDIDATO As Global.System.Data.DataRelation
    
    Private relationIM_FK2_IMAGENES_CANDIDATO1 As Global.System.Data.DataRelation
    
    Private relationIM_FK4_REQUISITOS_X_CANDIDATO1 As Global.System.Data.DataRelation
    
    Private relationIM_FK1_REQUISITOS1 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IM_CANDIDATOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOSDataTable(ds.Tables("IM_CANDIDATOS")))
            End If
            If (Not (ds.Tables("IM_CANDIDATOS_PUEDEN_REPETIR")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOS_PUEDEN_REPETIRDataTable(ds.Tables("IM_CANDIDATOS_PUEDEN_REPETIR")))
            End If
            If (Not (ds.Tables("IM_CANDIDATOS_REPETIDOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOS_REPETIDOSDataTable(ds.Tables("IM_CANDIDATOS_REPETIDOS")))
            End If
            If (Not (ds.Tables("IM_CARGOS_ELECTIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CARGOS_ELECTIVOSDataTable(ds.Tables("IM_CARGOS_ELECTIVOS")))
            End If
            If (Not (ds.Tables("IM_DEPARTAMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_DEPARTAMENTOSDataTable(ds.Tables("IM_DEPARTAMENTOS")))
            End If
            If (Not (ds.Tables("IM_MUNICIPIOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_MUNICIPIOSDataTable(ds.Tables("IM_MUNICIPIOS")))
            End If
            If (Not (ds.Tables("IM_MOVIMIENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_MOVIMIENTOSDataTable(ds.Tables("IM_MOVIMIENTOS")))
            End If
            If (Not (ds.Tables("IM_IMAGENES_CANDIDATO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_IMAGENES_CANDIDATODataTable(ds.Tables("IM_IMAGENES_CANDIDATO")))
            End If
            If (Not (ds.Tables("IM_PARTIDOS_POLITICOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_PARTIDOS_POLITICOSDataTable(ds.Tables("IM_PARTIDOS_POLITICOS")))
            End If
            If (Not (ds.Tables("IM_NIVEL_ELECTIVO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_NIVEL_ELECTIVODataTable(ds.Tables("IM_NIVEL_ELECTIVO")))
            End If
            If (Not (ds.Tables("TA_CANDIDATOS")) Is Nothing) Then
                MyBase.Tables.Add(New TA_CANDIDATOSDataTable(ds.Tables("TA_CANDIDATOS")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS_X_CANDIDATO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOS_X_CANDIDATODataTable(ds.Tables("IM_REQUISITOS_X_CANDIDATO")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOSDataTable(ds.Tables("IM_REQUISITOS")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS1")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOS1DataTable(ds.Tables("IM_REQUISITOS1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_CANDIDATOS() As IM_CANDIDATOSDataTable
        Get
            Return Me.tableIM_CANDIDATOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_CANDIDATOS_PUEDEN_REPETIR() As IM_CANDIDATOS_PUEDEN_REPETIRDataTable
        Get
            Return Me.tableIM_CANDIDATOS_PUEDEN_REPETIR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_CANDIDATOS_REPETIDOS() As IM_CANDIDATOS_REPETIDOSDataTable
        Get
            Return Me.tableIM_CANDIDATOS_REPETIDOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_CARGOS_ELECTIVOS() As IM_CARGOS_ELECTIVOSDataTable
        Get
            Return Me.tableIM_CARGOS_ELECTIVOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_DEPARTAMENTOS() As IM_DEPARTAMENTOSDataTable
        Get
            Return Me.tableIM_DEPARTAMENTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_MUNICIPIOS() As IM_MUNICIPIOSDataTable
        Get
            Return Me.tableIM_MUNICIPIOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_MOVIMIENTOS() As IM_MOVIMIENTOSDataTable
        Get
            Return Me.tableIM_MOVIMIENTOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_IMAGENES_CANDIDATO() As IM_IMAGENES_CANDIDATODataTable
        Get
            Return Me.tableIM_IMAGENES_CANDIDATO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_PARTIDOS_POLITICOS() As IM_PARTIDOS_POLITICOSDataTable
        Get
            Return Me.tableIM_PARTIDOS_POLITICOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_NIVEL_ELECTIVO() As IM_NIVEL_ELECTIVODataTable
        Get
            Return Me.tableIM_NIVEL_ELECTIVO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TA_CANDIDATOS() As TA_CANDIDATOSDataTable
        Get
            Return Me.tableTA_CANDIDATOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_REQUISITOS_X_CANDIDATO() As IM_REQUISITOS_X_CANDIDATODataTable
        Get
            Return Me.tableIM_REQUISITOS_X_CANDIDATO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_REQUISITOS() As IM_REQUISITOSDataTable
        Get
            Return Me.tableIM_REQUISITOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IM_REQUISITOS1() As IM_REQUISITOS1DataTable
        Get
            Return Me.tableIM_REQUISITOS1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSInscripcionCandidatos = CType(MyBase.Clone,DSInscripcionCandidatos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("IM_CANDIDATOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOSDataTable(ds.Tables("IM_CANDIDATOS")))
            End If
            If (Not (ds.Tables("IM_CANDIDATOS_PUEDEN_REPETIR")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOS_PUEDEN_REPETIRDataTable(ds.Tables("IM_CANDIDATOS_PUEDEN_REPETIR")))
            End If
            If (Not (ds.Tables("IM_CANDIDATOS_REPETIDOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CANDIDATOS_REPETIDOSDataTable(ds.Tables("IM_CANDIDATOS_REPETIDOS")))
            End If
            If (Not (ds.Tables("IM_CARGOS_ELECTIVOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_CARGOS_ELECTIVOSDataTable(ds.Tables("IM_CARGOS_ELECTIVOS")))
            End If
            If (Not (ds.Tables("IM_DEPARTAMENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_DEPARTAMENTOSDataTable(ds.Tables("IM_DEPARTAMENTOS")))
            End If
            If (Not (ds.Tables("IM_MUNICIPIOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_MUNICIPIOSDataTable(ds.Tables("IM_MUNICIPIOS")))
            End If
            If (Not (ds.Tables("IM_MOVIMIENTOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_MOVIMIENTOSDataTable(ds.Tables("IM_MOVIMIENTOS")))
            End If
            If (Not (ds.Tables("IM_IMAGENES_CANDIDATO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_IMAGENES_CANDIDATODataTable(ds.Tables("IM_IMAGENES_CANDIDATO")))
            End If
            If (Not (ds.Tables("IM_PARTIDOS_POLITICOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_PARTIDOS_POLITICOSDataTable(ds.Tables("IM_PARTIDOS_POLITICOS")))
            End If
            If (Not (ds.Tables("IM_NIVEL_ELECTIVO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_NIVEL_ELECTIVODataTable(ds.Tables("IM_NIVEL_ELECTIVO")))
            End If
            If (Not (ds.Tables("TA_CANDIDATOS")) Is Nothing) Then
                MyBase.Tables.Add(New TA_CANDIDATOSDataTable(ds.Tables("TA_CANDIDATOS")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS_X_CANDIDATO")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOS_X_CANDIDATODataTable(ds.Tables("IM_REQUISITOS_X_CANDIDATO")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOSDataTable(ds.Tables("IM_REQUISITOS")))
            End If
            If (Not (ds.Tables("IM_REQUISITOS1")) Is Nothing) Then
                MyBase.Tables.Add(New IM_REQUISITOS1DataTable(ds.Tables("IM_REQUISITOS1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableIM_CANDIDATOS = CType(MyBase.Tables("IM_CANDIDATOS"),IM_CANDIDATOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_CANDIDATOS) Is Nothing) Then
                Me.tableIM_CANDIDATOS.InitVars
            End If
        End If
        Me.tableIM_CANDIDATOS_PUEDEN_REPETIR = CType(MyBase.Tables("IM_CANDIDATOS_PUEDEN_REPETIR"),IM_CANDIDATOS_PUEDEN_REPETIRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_CANDIDATOS_PUEDEN_REPETIR) Is Nothing) Then
                Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.InitVars
            End If
        End If
        Me.tableIM_CANDIDATOS_REPETIDOS = CType(MyBase.Tables("IM_CANDIDATOS_REPETIDOS"),IM_CANDIDATOS_REPETIDOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_CANDIDATOS_REPETIDOS) Is Nothing) Then
                Me.tableIM_CANDIDATOS_REPETIDOS.InitVars
            End If
        End If
        Me.tableIM_CARGOS_ELECTIVOS = CType(MyBase.Tables("IM_CARGOS_ELECTIVOS"),IM_CARGOS_ELECTIVOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_CARGOS_ELECTIVOS) Is Nothing) Then
                Me.tableIM_CARGOS_ELECTIVOS.InitVars
            End If
        End If
        Me.tableIM_DEPARTAMENTOS = CType(MyBase.Tables("IM_DEPARTAMENTOS"),IM_DEPARTAMENTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_DEPARTAMENTOS) Is Nothing) Then
                Me.tableIM_DEPARTAMENTOS.InitVars
            End If
        End If
        Me.tableIM_MUNICIPIOS = CType(MyBase.Tables("IM_MUNICIPIOS"),IM_MUNICIPIOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_MUNICIPIOS) Is Nothing) Then
                Me.tableIM_MUNICIPIOS.InitVars
            End If
        End If
        Me.tableIM_MOVIMIENTOS = CType(MyBase.Tables("IM_MOVIMIENTOS"),IM_MOVIMIENTOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_MOVIMIENTOS) Is Nothing) Then
                Me.tableIM_MOVIMIENTOS.InitVars
            End If
        End If
        Me.tableIM_IMAGENES_CANDIDATO = CType(MyBase.Tables("IM_IMAGENES_CANDIDATO"),IM_IMAGENES_CANDIDATODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_IMAGENES_CANDIDATO) Is Nothing) Then
                Me.tableIM_IMAGENES_CANDIDATO.InitVars
            End If
        End If
        Me.tableIM_PARTIDOS_POLITICOS = CType(MyBase.Tables("IM_PARTIDOS_POLITICOS"),IM_PARTIDOS_POLITICOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_PARTIDOS_POLITICOS) Is Nothing) Then
                Me.tableIM_PARTIDOS_POLITICOS.InitVars
            End If
        End If
        Me.tableIM_NIVEL_ELECTIVO = CType(MyBase.Tables("IM_NIVEL_ELECTIVO"),IM_NIVEL_ELECTIVODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_NIVEL_ELECTIVO) Is Nothing) Then
                Me.tableIM_NIVEL_ELECTIVO.InitVars
            End If
        End If
        Me.tableTA_CANDIDATOS = CType(MyBase.Tables("TA_CANDIDATOS"),TA_CANDIDATOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTA_CANDIDATOS) Is Nothing) Then
                Me.tableTA_CANDIDATOS.InitVars
            End If
        End If
        Me.tableIM_REQUISITOS_X_CANDIDATO = CType(MyBase.Tables("IM_REQUISITOS_X_CANDIDATO"),IM_REQUISITOS_X_CANDIDATODataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_REQUISITOS_X_CANDIDATO) Is Nothing) Then
                Me.tableIM_REQUISITOS_X_CANDIDATO.InitVars
            End If
        End If
        Me.tableIM_REQUISITOS = CType(MyBase.Tables("IM_REQUISITOS"),IM_REQUISITOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_REQUISITOS) Is Nothing) Then
                Me.tableIM_REQUISITOS.InitVars
            End If
        End If
        Me.tableIM_REQUISITOS1 = CType(MyBase.Tables("IM_REQUISITOS1"),IM_REQUISITOS1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableIM_REQUISITOS1) Is Nothing) Then
                Me.tableIM_REQUISITOS1.InitVars
            End If
        End If
        Me.relationIM_FK2_CANDIDATOS = Me.Relations("IM_FK2_CANDIDATOS")
        Me.relationIM_FK3_CANDIDATOS = Me.Relations("IM_FK3_CANDIDATOS")
        Me.relationIM_FK4_CANDIDATOS = Me.Relations("IM_FK4_CANDIDATOS")
        Me.relationIM_FK2_CAND_PUEDEN_REPETIR = Me.Relations("IM_FK2_CAND_PUEDEN_REPETIR")
        Me.relationIM_FK2_CANDIDATOS_REPETIDOS = Me.Relations("IM_FK2_CANDIDATOS_REPETIDOS")
        Me.relationIM_FK1_CARGOS_ELECTIVOS = Me.Relations("IM_FK1_CARGOS_ELECTIVOS")
        Me.relationIM_FK1_MUNICIPIO = Me.Relations("IM_FK1_MUNICIPIO")
        Me.relationIM_FK1_MOVIMIENTOS = Me.Relations("IM_FK1_MOVIMIENTOS")
        Me.relationIM_FK1_IMAGENES_CANDIDATO = Me.Relations("IM_FK1_IMAGENES_CANDIDATO")
        Me.relationIM_FK1_IMAGENES_CANDIDATO1 = Me.Relations("IM_FK1_IMAGENES_CANDIDATO1")
        Me.relationIM_FK2_CANDIDATOS1 = Me.Relations("IM_FK2_CANDIDATOS1")
        Me.relationIM_FK3_CANDIDATOS1 = Me.Relations("IM_FK3_CANDIDATOS1")
        Me.relationIM_FK4_CANDIDATOS1 = Me.Relations("IM_FK4_CANDIDATOS1")
        Me.relationIM_FK1_REQUISITOS_X_CANDIDATO = Me.Relations("IM_FK1_REQUISITOS_X_CANDIDATO")
        Me.relationIM_FK3_REQUISITOS_X_CANDIDATO = Me.Relations("IM_FK3_REQUISITOS_X_CANDIDATO")
        Me.relationIM_FK1_REQUISITOS = Me.Relations("IM_FK1_REQUISITOS")
        Me.relationIM_FK4_REQUISITOS_X_CANDIDATO = Me.Relations("IM_FK4_REQUISITOS_X_CANDIDATO")
        Me.relationIM_FK2_IMAGENES_CANDIDATO = Me.Relations("IM_FK2_IMAGENES_CANDIDATO")
        Me.relationIM_FK2_IMAGENES_CANDIDATO1 = Me.Relations("IM_FK2_IMAGENES_CANDIDATO1")
        Me.relationIM_FK4_REQUISITOS_X_CANDIDATO1 = Me.Relations("IM_FK4_REQUISITOS_X_CANDIDATO1")
        Me.relationIM_FK1_REQUISITOS1 = Me.Relations("IM_FK1_REQUISITOS1")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSInscripcionCandidatos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSInscripcionCandidatos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableIM_CANDIDATOS = New IM_CANDIDATOSDataTable
        MyBase.Tables.Add(Me.tableIM_CANDIDATOS)
        Me.tableIM_CANDIDATOS_PUEDEN_REPETIR = New IM_CANDIDATOS_PUEDEN_REPETIRDataTable
        MyBase.Tables.Add(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR)
        Me.tableIM_CANDIDATOS_REPETIDOS = New IM_CANDIDATOS_REPETIDOSDataTable
        MyBase.Tables.Add(Me.tableIM_CANDIDATOS_REPETIDOS)
        Me.tableIM_CARGOS_ELECTIVOS = New IM_CARGOS_ELECTIVOSDataTable
        MyBase.Tables.Add(Me.tableIM_CARGOS_ELECTIVOS)
        Me.tableIM_DEPARTAMENTOS = New IM_DEPARTAMENTOSDataTable
        MyBase.Tables.Add(Me.tableIM_DEPARTAMENTOS)
        Me.tableIM_MUNICIPIOS = New IM_MUNICIPIOSDataTable
        MyBase.Tables.Add(Me.tableIM_MUNICIPIOS)
        Me.tableIM_MOVIMIENTOS = New IM_MOVIMIENTOSDataTable
        MyBase.Tables.Add(Me.tableIM_MOVIMIENTOS)
        Me.tableIM_IMAGENES_CANDIDATO = New IM_IMAGENES_CANDIDATODataTable
        MyBase.Tables.Add(Me.tableIM_IMAGENES_CANDIDATO)
        Me.tableIM_PARTIDOS_POLITICOS = New IM_PARTIDOS_POLITICOSDataTable
        MyBase.Tables.Add(Me.tableIM_PARTIDOS_POLITICOS)
        Me.tableIM_NIVEL_ELECTIVO = New IM_NIVEL_ELECTIVODataTable
        MyBase.Tables.Add(Me.tableIM_NIVEL_ELECTIVO)
        Me.tableTA_CANDIDATOS = New TA_CANDIDATOSDataTable
        MyBase.Tables.Add(Me.tableTA_CANDIDATOS)
        Me.tableIM_REQUISITOS_X_CANDIDATO = New IM_REQUISITOS_X_CANDIDATODataTable
        MyBase.Tables.Add(Me.tableIM_REQUISITOS_X_CANDIDATO)
        Me.tableIM_REQUISITOS = New IM_REQUISITOSDataTable
        MyBase.Tables.Add(Me.tableIM_REQUISITOS)
        Me.tableIM_REQUISITOS1 = New IM_REQUISITOS1DataTable
        MyBase.Tables.Add(Me.tableIM_REQUISITOS1)
        Me.relationIM_FK2_CANDIDATOS = New Global.System.Data.DataRelation("IM_FK2_CANDIDATOS", New Global.System.Data.DataColumn() {Me.tableIM_MUNICIPIOS.CODIGO_MUNICIPIOColumn, Me.tableIM_MUNICIPIOS.CODIGO_DEPARTAMENTOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS.CODIGO_MUNICIPIOColumn, Me.tableIM_CANDIDATOS.CODIGO_DEPARTAMENTOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_CANDIDATOS)
        Me.relationIM_FK3_CANDIDATOS = New Global.System.Data.DataRelation("IM_FK3_CANDIDATOS", New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK3_CANDIDATOS)
        Me.relationIM_FK4_CANDIDATOS = New Global.System.Data.DataRelation("IM_FK4_CANDIDATOS", New Global.System.Data.DataColumn() {Me.tableIM_PARTIDOS_POLITICOS.CODIGO_PARTIDOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS.CODIGO_PARTIDOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK4_CANDIDATOS)
        Me.relationIM_FK2_CAND_PUEDEN_REPETIR = New Global.System.Data.DataRelation("IM_FK2_CAND_PUEDEN_REPETIR", New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.CODIGO_CARGO_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_CAND_PUEDEN_REPETIR)
        Me.relationIM_FK2_CANDIDATOS_REPETIDOS = New Global.System.Data.DataRelation("IM_FK2_CANDIDATOS_REPETIDOS", New Global.System.Data.DataColumn() {Me.tableIM_MOVIMIENTOS.CODIGO_MOVIMIENTOColumn, Me.tableIM_MOVIMIENTOS.CODIGO_PARTIDOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_MOVIMIENTOColumn, Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_PARTIDOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_CANDIDATOS_REPETIDOS)
        Me.relationIM_FK1_CARGOS_ELECTIVOS = New Global.System.Data.DataRelation("IM_FK1_CARGOS_ELECTIVOS", New Global.System.Data.DataColumn() {Me.tableIM_NIVEL_ELECTIVO.CODIGO_NIVEL_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_NIVEL_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_CARGOS_ELECTIVOS)
        Me.relationIM_FK1_MUNICIPIO = New Global.System.Data.DataRelation("IM_FK1_MUNICIPIO", New Global.System.Data.DataColumn() {Me.tableIM_DEPARTAMENTOS.CODIGO_DEPARTAMENTOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_MUNICIPIOS.CODIGO_DEPARTAMENTOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_MUNICIPIO)
        Me.relationIM_FK1_MOVIMIENTOS = New Global.System.Data.DataRelation("IM_FK1_MOVIMIENTOS", New Global.System.Data.DataColumn() {Me.tableIM_PARTIDOS_POLITICOS.CODIGO_PARTIDOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_MOVIMIENTOS.CODIGO_PARTIDOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_MOVIMIENTOS)
        Me.relationIM_FK1_IMAGENES_CANDIDATO = New Global.System.Data.DataRelation("IM_FK1_IMAGENES_CANDIDATO", New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS.CODIGO_CANDIDATOSColumn}, New Global.System.Data.DataColumn() {Me.tableIM_IMAGENES_CANDIDATO.CODIGO_CANDIDATOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_IMAGENES_CANDIDATO)
        Me.relationIM_FK1_IMAGENES_CANDIDATO1 = New Global.System.Data.DataRelation("IM_FK1_IMAGENES_CANDIDATO1", New Global.System.Data.DataColumn() {Me.tableTA_CANDIDATOS.CODIGO_CANDIDATOSColumn}, New Global.System.Data.DataColumn() {Me.tableIM_IMAGENES_CANDIDATO.CODIGO_CANDIDATOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_IMAGENES_CANDIDATO1)
        Me.relationIM_FK2_CANDIDATOS1 = New Global.System.Data.DataRelation("IM_FK2_CANDIDATOS1", New Global.System.Data.DataColumn() {Me.tableIM_MUNICIPIOS.CODIGO_MUNICIPIOColumn, Me.tableIM_MUNICIPIOS.CODIGO_DEPARTAMENTOColumn}, New Global.System.Data.DataColumn() {Me.tableTA_CANDIDATOS.CODIGO_MUNICIPIOColumn, Me.tableTA_CANDIDATOS.CODIGO_DEPARTAMENTOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_CANDIDATOS1)
        Me.relationIM_FK3_CANDIDATOS1 = New Global.System.Data.DataRelation("IM_FK3_CANDIDATOS1", New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableTA_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK3_CANDIDATOS1)
        Me.relationIM_FK4_CANDIDATOS1 = New Global.System.Data.DataRelation("IM_FK4_CANDIDATOS1", New Global.System.Data.DataColumn() {Me.tableIM_PARTIDOS_POLITICOS.CODIGO_PARTIDOColumn}, New Global.System.Data.DataColumn() {Me.tableTA_CANDIDATOS.CODIGO_PARTIDOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK4_CANDIDATOS1)
        Me.relationIM_FK1_REQUISITOS_X_CANDIDATO = New Global.System.Data.DataRelation("IM_FK1_REQUISITOS_X_CANDIDATO", New Global.System.Data.DataColumn() {Me.tableIM_CANDIDATOS.CODIGO_CANDIDATOSColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_CANDIDATOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_REQUISITOS_X_CANDIDATO)
        Me.relationIM_FK3_REQUISITOS_X_CANDIDATO = New Global.System.Data.DataRelation("IM_FK3_REQUISITOS_X_CANDIDATO", New Global.System.Data.DataColumn() {Me.tableIM_MOVIMIENTOS.CODIGO_MOVIMIENTOColumn, Me.tableIM_MOVIMIENTOS.CODIGO_PARTIDOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_MOVIMIENTOColumn, Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_PARTIDOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK3_REQUISITOS_X_CANDIDATO)
        Me.relationIM_FK1_REQUISITOS = New Global.System.Data.DataRelation("IM_FK1_REQUISITOS", New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS.CODIGO_CARGO_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_REQUISITOS)
        Me.relationIM_FK4_REQUISITOS_X_CANDIDATO = New Global.System.Data.DataRelation("IM_FK4_REQUISITOS_X_CANDIDATO", New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS.CODIGO_REQUISITOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_REQUISITOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK4_REQUISITOS_X_CANDIDATO)
        Me.relationIM_FK2_IMAGENES_CANDIDATO = New Global.System.Data.DataRelation("IM_FK2_IMAGENES_CANDIDATO", New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS.CODIGO_REQUISITOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_IMAGENES_CANDIDATO.CODIGO_REQUISITOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_IMAGENES_CANDIDATO)
        Me.relationIM_FK2_IMAGENES_CANDIDATO1 = New Global.System.Data.DataRelation("IM_FK2_IMAGENES_CANDIDATO1", New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS1.CODIGO_REQUISITOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_IMAGENES_CANDIDATO.CODIGO_REQUISITOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK2_IMAGENES_CANDIDATO1)
        Me.relationIM_FK4_REQUISITOS_X_CANDIDATO1 = New Global.System.Data.DataRelation("IM_FK4_REQUISITOS_X_CANDIDATO1", New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS1.CODIGO_REQUISITOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_REQUISITOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK4_REQUISITOS_X_CANDIDATO1)
        Me.relationIM_FK1_REQUISITOS1 = New Global.System.Data.DataRelation("IM_FK1_REQUISITOS1", New Global.System.Data.DataColumn() {Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn}, New Global.System.Data.DataColumn() {Me.tableIM_REQUISITOS1.CODIGO_CARGO_ELECTIVOColumn}, false)
        Me.Relations.Add(Me.relationIM_FK1_REQUISITOS1)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_CANDIDATOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_CANDIDATOS_PUEDEN_REPETIR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_CANDIDATOS_REPETIDOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_CARGOS_ELECTIVOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_DEPARTAMENTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_MUNICIPIOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_MOVIMIENTOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_IMAGENES_CANDIDATO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_PARTIDOS_POLITICOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_NIVEL_ELECTIVO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTA_CANDIDATOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_REQUISITOS_X_CANDIDATO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_REQUISITOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeIM_REQUISITOS1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub IM_CANDIDATOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_CANDIDATOSRowChangeEvent)
    
    Public Delegate Sub IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent)
    
    Public Delegate Sub IM_CANDIDATOS_REPETIDOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_CANDIDATOS_REPETIDOSRowChangeEvent)
    
    Public Delegate Sub IM_CARGOS_ELECTIVOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_CARGOS_ELECTIVOSRowChangeEvent)
    
    Public Delegate Sub IM_DEPARTAMENTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_DEPARTAMENTOSRowChangeEvent)
    
    Public Delegate Sub IM_MUNICIPIOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_MUNICIPIOSRowChangeEvent)
    
    Public Delegate Sub IM_MOVIMIENTOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_MOVIMIENTOSRowChangeEvent)
    
    Public Delegate Sub IM_IMAGENES_CANDIDATORowChangeEventHandler(ByVal sender As Object, ByVal e As IM_IMAGENES_CANDIDATORowChangeEvent)
    
    Public Delegate Sub IM_PARTIDOS_POLITICOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_PARTIDOS_POLITICOSRowChangeEvent)
    
    Public Delegate Sub IM_NIVEL_ELECTIVORowChangeEventHandler(ByVal sender As Object, ByVal e As IM_NIVEL_ELECTIVORowChangeEvent)
    
    Public Delegate Sub TA_CANDIDATOSRowChangeEventHandler(ByVal sender As Object, ByVal e As TA_CANDIDATOSRowChangeEvent)
    
    Public Delegate Sub IM_REQUISITOS_X_CANDIDATORowChangeEventHandler(ByVal sender As Object, ByVal e As IM_REQUISITOS_X_CANDIDATORowChangeEvent)
    
    Public Delegate Sub IM_REQUISITOSRowChangeEventHandler(ByVal sender As Object, ByVal e As IM_REQUISITOSRowChangeEvent)
    
    Public Delegate Sub IM_REQUISITOS1RowChangeEventHandler(ByVal sender As Object, ByVal e As IM_REQUISITOS1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_CANDIDATOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_CANDIDATOSRow)
        
        Private columnCODIGO_CANDIDATOS As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnPOSICION As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnAPELLIDO As Global.System.Data.DataColumn
        
        Private columnCODIGO_DEPARTAMENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_MUNICIPIO As Global.System.Data.DataColumn
        
        Private columnCODIGO_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnIDENTIDAD As Global.System.Data.DataColumn
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_CANDIDATOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CANDIDATOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CANDIDATOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APELLIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DEPARTAMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DEPARTAMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MUNICIPIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MUNICIPIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_CANDIDATOSRow
            Get
                Return CType(Me.Rows(index),IM_CANDIDATOSRow)
            End Get
        End Property
        
        Public Event IM_CANDIDATOSRowChanging As IM_CANDIDATOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOSRowChanged As IM_CANDIDATOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOSRowDeleting As IM_CANDIDATOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOSRowDeleted As IM_CANDIDATOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_CANDIDATOSRow(ByVal row As IM_CANDIDATOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_CANDIDATOSRow(ByVal CODIGO_CANDIDATOS As Decimal, ByVal NOMBRE As String, ByVal POSICION As Decimal, ByVal parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS As IM_CARGOS_ELECTIVOSRow, ByVal APELLIDO As String, ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal CODIGO_MUNICIPIO As Decimal, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal IDENTIDAD As String, ByVal parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS As IM_PARTIDOS_POLITICOSRow, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_CANDIDATOSRow
            Dim rowIM_CANDIDATOSRow As IM_CANDIDATOSRow = CType(Me.NewRow,IM_CANDIDATOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_CANDIDATOS, NOMBRE, POSICION, Nothing, APELLIDO, CODIGO_DEPARTAMENTO, CODIGO_MUNICIPIO, CODIGO_MOVIMIENTO, IDENTIDAD, Nothing, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            If (Not (parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS) Is Nothing) Then
                columnValuesArray(3) = parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS(0)
            End If
            If (Not (parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS) Is Nothing) Then
                columnValuesArray(9) = parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS(0)
            End If
            rowIM_CANDIDATOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_CANDIDATOSRow)
            Return rowIM_CANDIDATOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_CANDIDATOS(ByVal CODIGO_CANDIDATOS As Decimal) As IM_CANDIDATOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_CANDIDATOS}),IM_CANDIDATOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_CANDIDATOSDataTable = CType(MyBase.Clone,IM_CANDIDATOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_CANDIDATOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_CANDIDATOS = MyBase.Columns("CODIGO_CANDIDATOS")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnPOSICION = MyBase.Columns("POSICION")
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnCODIGO_DEPARTAMENTO = MyBase.Columns("CODIGO_DEPARTAMENTO")
            Me.columnCODIGO_MUNICIPIO = MyBase.Columns("CODIGO_MUNICIPIO")
            Me.columnCODIGO_MOVIMIENTO = MyBase.Columns("CODIGO_MOVIMIENTO")
            Me.columnIDENTIDAD = MyBase.Columns("IDENTIDAD")
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_CANDIDATOS = New Global.System.Data.DataColumn("CODIGO_CANDIDATOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CANDIDATOS)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnPOSICION = New Global.System.Data.DataColumn("POSICION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSICION)
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnAPELLIDO = New Global.System.Data.DataColumn("APELLIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnCODIGO_DEPARTAMENTO = New Global.System.Data.DataColumn("CODIGO_DEPARTAMENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DEPARTAMENTO)
            Me.columnCODIGO_MUNICIPIO = New Global.System.Data.DataColumn("CODIGO_MUNICIPIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MUNICIPIO)
            Me.columnCODIGO_MOVIMIENTO = New Global.System.Data.DataColumn("CODIGO_MOVIMIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MOVIMIENTO)
            Me.columnIDENTIDAD = New Global.System.Data.DataColumn("IDENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIDAD)
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_CANDIDATOS}, true))
            Me.columnCODIGO_CANDIDATOS.AllowDBNull = false
            Me.columnCODIGO_CANDIDATOS.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
            Me.columnCODIGO_CARGO_ELECTIVO.AllowDBNull = false
            Me.columnAPELLIDO.AllowDBNull = false
            Me.columnAPELLIDO.MaxLength = 100
            Me.columnCODIGO_DEPARTAMENTO.AllowDBNull = false
            Me.columnCODIGO_MUNICIPIO.AllowDBNull = false
            Me.columnCODIGO_MOVIMIENTO.AllowDBNull = false
            Me.columnIDENTIDAD.AllowDBNull = false
            Me.columnIDENTIDAD.MaxLength = 15
            Me.columnCODIGO_PARTIDO.AllowDBNull = false
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_CANDIDATOSRow() As IM_CANDIDATOSRow
            Return CType(Me.NewRow,IM_CANDIDATOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_CANDIDATOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_CANDIDATOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_CANDIDATOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOSRowChanged(Me, New IM_CANDIDATOSRowChangeEvent(CType(e.Row,IM_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_CANDIDATOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOSRowChanging(Me, New IM_CANDIDATOSRowChangeEvent(CType(e.Row,IM_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_CANDIDATOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOSRowDeleted(Me, New IM_CANDIDATOSRowChangeEvent(CType(e.Row,IM_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_CANDIDATOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOSRowDeleting(Me, New IM_CANDIDATOSRowChangeEvent(CType(e.Row,IM_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_CANDIDATOSRow(ByVal row As IM_CANDIDATOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_CANDIDATOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_CANDIDATOS_PUEDEN_REPETIRDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_CANDIDATOS_PUEDEN_REPETIRRow)
        
        Private columnIDENTIDAD As Global.System.Data.DataColumn
        
        Private columnYA_INGRESADO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_CANDIDATOS_PUEDEN_REPETIR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YA_INGRESADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYA_INGRESADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_CANDIDATOS_PUEDEN_REPETIRRow
            Get
                Return CType(Me.Rows(index),IM_CANDIDATOS_PUEDEN_REPETIRRow)
            End Get
        End Property
        
        Public Event IM_CANDIDATOS_PUEDEN_REPETIRRowChanging As IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_PUEDEN_REPETIRRowChanged As IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_PUEDEN_REPETIRRowDeleting As IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_PUEDEN_REPETIRRowDeleted As IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_CANDIDATOS_PUEDEN_REPETIRRow(ByVal row As IM_CANDIDATOS_PUEDEN_REPETIRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_CANDIDATOS_PUEDEN_REPETIRRow(ByVal IDENTIDAD As String, ByVal YA_INGRESADO As String, ByVal parentIM_CARGOS_ELECTIVOSRowByIM_FK2_CAND_PUEDEN_REPETIR As IM_CARGOS_ELECTIVOSRow, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_CANDIDATOS_PUEDEN_REPETIRRow
            Dim rowIM_CANDIDATOS_PUEDEN_REPETIRRow As IM_CANDIDATOS_PUEDEN_REPETIRRow = CType(Me.NewRow,IM_CANDIDATOS_PUEDEN_REPETIRRow)
            Dim columnValuesArray() As Object = New Object() {IDENTIDAD, YA_INGRESADO, Nothing, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            If (Not (parentIM_CARGOS_ELECTIVOSRowByIM_FK2_CAND_PUEDEN_REPETIR) Is Nothing) Then
                columnValuesArray(2) = parentIM_CARGOS_ELECTIVOSRowByIM_FK2_CAND_PUEDEN_REPETIR(0)
            End If
            rowIM_CANDIDATOS_PUEDEN_REPETIRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_CANDIDATOS_PUEDEN_REPETIRRow)
            Return rowIM_CANDIDATOS_PUEDEN_REPETIRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDENTIDAD(ByVal IDENTIDAD As String) As IM_CANDIDATOS_PUEDEN_REPETIRRow
            Return CType(Me.Rows.Find(New Object() {IDENTIDAD}),IM_CANDIDATOS_PUEDEN_REPETIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_CANDIDATOS_PUEDEN_REPETIRDataTable = CType(MyBase.Clone,IM_CANDIDATOS_PUEDEN_REPETIRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_CANDIDATOS_PUEDEN_REPETIRDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDENTIDAD = MyBase.Columns("IDENTIDAD")
            Me.columnYA_INGRESADO = MyBase.Columns("YA_INGRESADO")
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDENTIDAD = New Global.System.Data.DataColumn("IDENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIDAD)
            Me.columnYA_INGRESADO = New Global.System.Data.DataColumn("YA_INGRESADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYA_INGRESADO)
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDENTIDAD}, true))
            Me.columnIDENTIDAD.AllowDBNull = false
            Me.columnIDENTIDAD.Unique = true
            Me.columnIDENTIDAD.MaxLength = 15
            Me.columnYA_INGRESADO.MaxLength = 2
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_CANDIDATOS_PUEDEN_REPETIRRow() As IM_CANDIDATOS_PUEDEN_REPETIRRow
            Return CType(Me.NewRow,IM_CANDIDATOS_PUEDEN_REPETIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_CANDIDATOS_PUEDEN_REPETIRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_CANDIDATOS_PUEDEN_REPETIRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_CANDIDATOS_PUEDEN_REPETIRRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_PUEDEN_REPETIRRowChanged(Me, New IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent(CType(e.Row,IM_CANDIDATOS_PUEDEN_REPETIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_CANDIDATOS_PUEDEN_REPETIRRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_PUEDEN_REPETIRRowChanging(Me, New IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent(CType(e.Row,IM_CANDIDATOS_PUEDEN_REPETIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_CANDIDATOS_PUEDEN_REPETIRRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_PUEDEN_REPETIRRowDeleted(Me, New IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent(CType(e.Row,IM_CANDIDATOS_PUEDEN_REPETIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_CANDIDATOS_PUEDEN_REPETIRRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_PUEDEN_REPETIRRowDeleting(Me, New IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent(CType(e.Row,IM_CANDIDATOS_PUEDEN_REPETIRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_CANDIDATOS_PUEDEN_REPETIRRow(ByVal row As IM_CANDIDATOS_PUEDEN_REPETIRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_CANDIDATOS_PUEDEN_REPETIRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_CANDIDATOS_REPETIDOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_CANDIDATOS_REPETIDOSRow)
        
        Private columnIDENTIDAD As Global.System.Data.DataColumn
        
        Private columnCODIGO_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_CANDIDATOS_REPETIDOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_CANDIDATOS_REPETIDOSRow
            Get
                Return CType(Me.Rows(index),IM_CANDIDATOS_REPETIDOSRow)
            End Get
        End Property
        
        Public Event IM_CANDIDATOS_REPETIDOSRowChanging As IM_CANDIDATOS_REPETIDOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_REPETIDOSRowChanged As IM_CANDIDATOS_REPETIDOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_REPETIDOSRowDeleting As IM_CANDIDATOS_REPETIDOSRowChangeEventHandler
        
        Public Event IM_CANDIDATOS_REPETIDOSRowDeleted As IM_CANDIDATOS_REPETIDOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_CANDIDATOS_REPETIDOSRow(ByVal row As IM_CANDIDATOS_REPETIDOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_CANDIDATOS_REPETIDOSRow(ByVal IDENTIDAD As String, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_PARTIDO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_CANDIDATOS_REPETIDOSRow
            Dim rowIM_CANDIDATOS_REPETIDOSRow As IM_CANDIDATOS_REPETIDOSRow = CType(Me.NewRow,IM_CANDIDATOS_REPETIDOSRow)
            Dim columnValuesArray() As Object = New Object() {IDENTIDAD, CODIGO_MOVIMIENTO, CODIGO_PARTIDO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            rowIM_CANDIDATOS_REPETIDOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_CANDIDATOS_REPETIDOSRow)
            Return rowIM_CANDIDATOS_REPETIDOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDENTIDADCODIGO_MOVIMIENTOCODIGO_PARTIDO(ByVal IDENTIDAD As String, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_PARTIDO As Decimal) As IM_CANDIDATOS_REPETIDOSRow
            Return CType(Me.Rows.Find(New Object() {IDENTIDAD, CODIGO_MOVIMIENTO, CODIGO_PARTIDO}),IM_CANDIDATOS_REPETIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_CANDIDATOS_REPETIDOSDataTable = CType(MyBase.Clone,IM_CANDIDATOS_REPETIDOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_CANDIDATOS_REPETIDOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIDENTIDAD = MyBase.Columns("IDENTIDAD")
            Me.columnCODIGO_MOVIMIENTO = MyBase.Columns("CODIGO_MOVIMIENTO")
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIDENTIDAD = New Global.System.Data.DataColumn("IDENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIDAD)
            Me.columnCODIGO_MOVIMIENTO = New Global.System.Data.DataColumn("CODIGO_MOVIMIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MOVIMIENTO)
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIDENTIDAD, Me.columnCODIGO_MOVIMIENTO, Me.columnCODIGO_PARTIDO}, true))
            Me.columnIDENTIDAD.AllowDBNull = false
            Me.columnIDENTIDAD.MaxLength = 15
            Me.columnCODIGO_MOVIMIENTO.AllowDBNull = false
            Me.columnCODIGO_PARTIDO.AllowDBNull = false
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_CANDIDATOS_REPETIDOSRow() As IM_CANDIDATOS_REPETIDOSRow
            Return CType(Me.NewRow,IM_CANDIDATOS_REPETIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_CANDIDATOS_REPETIDOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_CANDIDATOS_REPETIDOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_CANDIDATOS_REPETIDOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_REPETIDOSRowChanged(Me, New IM_CANDIDATOS_REPETIDOSRowChangeEvent(CType(e.Row,IM_CANDIDATOS_REPETIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_CANDIDATOS_REPETIDOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_REPETIDOSRowChanging(Me, New IM_CANDIDATOS_REPETIDOSRowChangeEvent(CType(e.Row,IM_CANDIDATOS_REPETIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_CANDIDATOS_REPETIDOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_REPETIDOSRowDeleted(Me, New IM_CANDIDATOS_REPETIDOSRowChangeEvent(CType(e.Row,IM_CANDIDATOS_REPETIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_CANDIDATOS_REPETIDOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_CANDIDATOS_REPETIDOSRowDeleting(Me, New IM_CANDIDATOS_REPETIDOSRowChangeEvent(CType(e.Row,IM_CANDIDATOS_REPETIDOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_CANDIDATOS_REPETIDOSRow(ByVal row As IM_CANDIDATOS_REPETIDOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_CANDIDATOS_REPETIDOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_CARGOS_ELECTIVOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_CARGOS_ELECTIVOSRow)
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_SUPERIOR As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnCODIGO_NIVEL_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_CARGOS_ELECTIVOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_SUPERIORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_SUPERIOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_NIVEL_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_NIVEL_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.Rows(index),IM_CARGOS_ELECTIVOSRow)
            End Get
        End Property
        
        Public Event IM_CARGOS_ELECTIVOSRowChanging As IM_CARGOS_ELECTIVOSRowChangeEventHandler
        
        Public Event IM_CARGOS_ELECTIVOSRowChanged As IM_CARGOS_ELECTIVOSRowChangeEventHandler
        
        Public Event IM_CARGOS_ELECTIVOSRowDeleting As IM_CARGOS_ELECTIVOSRowChangeEventHandler
        
        Public Event IM_CARGOS_ELECTIVOSRowDeleted As IM_CARGOS_ELECTIVOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_CARGOS_ELECTIVOSRow(ByVal row As IM_CARGOS_ELECTIVOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_CARGOS_ELECTIVOSRow(ByVal CODIGO_CARGO_ELECTIVO As Decimal, ByVal CODIGO_CARGO_SUPERIOR As Decimal, ByVal DESCRIPCION As String, ByVal parentIM_NIVEL_ELECTIVORowByIM_FK1_CARGOS_ELECTIVOS As IM_NIVEL_ELECTIVORow, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_CARGOS_ELECTIVOSRow
            Dim rowIM_CARGOS_ELECTIVOSRow As IM_CARGOS_ELECTIVOSRow = CType(Me.NewRow,IM_CARGOS_ELECTIVOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_CARGO_ELECTIVO, CODIGO_CARGO_SUPERIOR, DESCRIPCION, Nothing, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            If (Not (parentIM_NIVEL_ELECTIVORowByIM_FK1_CARGOS_ELECTIVOS) Is Nothing) Then
                columnValuesArray(3) = parentIM_NIVEL_ELECTIVORowByIM_FK1_CARGOS_ELECTIVOS(0)
            End If
            rowIM_CARGOS_ELECTIVOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_CARGOS_ELECTIVOSRow)
            Return rowIM_CARGOS_ELECTIVOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_CARGO_ELECTIVO(ByVal CODIGO_CARGO_ELECTIVO As Decimal) As IM_CARGOS_ELECTIVOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_CARGO_ELECTIVO}),IM_CARGOS_ELECTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_CARGOS_ELECTIVOSDataTable = CType(MyBase.Clone,IM_CARGOS_ELECTIVOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_CARGOS_ELECTIVOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnCODIGO_CARGO_SUPERIOR = MyBase.Columns("CODIGO_CARGO_SUPERIOR")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnCODIGO_NIVEL_ELECTIVO = MyBase.Columns("CODIGO_NIVEL_ELECTIVO")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnCODIGO_CARGO_SUPERIOR = New Global.System.Data.DataColumn("CODIGO_CARGO_SUPERIOR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_SUPERIOR)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnCODIGO_NIVEL_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_NIVEL_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_NIVEL_ELECTIVO)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_CARGO_ELECTIVO}, true))
            Me.columnCODIGO_CARGO_ELECTIVO.AllowDBNull = false
            Me.columnCODIGO_CARGO_ELECTIVO.Unique = true
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnCODIGO_NIVEL_ELECTIVO.AllowDBNull = false
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Return CType(Me.NewRow,IM_CARGOS_ELECTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_CARGOS_ELECTIVOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_CARGOS_ELECTIVOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_CARGOS_ELECTIVOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_CARGOS_ELECTIVOSRowChanged(Me, New IM_CARGOS_ELECTIVOSRowChangeEvent(CType(e.Row,IM_CARGOS_ELECTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_CARGOS_ELECTIVOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_CARGOS_ELECTIVOSRowChanging(Me, New IM_CARGOS_ELECTIVOSRowChangeEvent(CType(e.Row,IM_CARGOS_ELECTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_CARGOS_ELECTIVOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_CARGOS_ELECTIVOSRowDeleted(Me, New IM_CARGOS_ELECTIVOSRowChangeEvent(CType(e.Row,IM_CARGOS_ELECTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_CARGOS_ELECTIVOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_CARGOS_ELECTIVOSRowDeleting(Me, New IM_CARGOS_ELECTIVOSRowChangeEvent(CType(e.Row,IM_CARGOS_ELECTIVOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_CARGOS_ELECTIVOSRow(ByVal row As IM_CARGOS_ELECTIVOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_CARGOS_ELECTIVOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_DEPARTAMENTOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_DEPARTAMENTOSRow)
        
        Private columnCODIGO_DEPARTAMENTO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnCANTIDAD_DIPUTADOS As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_DEPARTAMENTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DEPARTAMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DEPARTAMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDAD_DIPUTADOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_DIPUTADOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_DEPARTAMENTOSRow
            Get
                Return CType(Me.Rows(index),IM_DEPARTAMENTOSRow)
            End Get
        End Property
        
        Public Event IM_DEPARTAMENTOSRowChanging As IM_DEPARTAMENTOSRowChangeEventHandler
        
        Public Event IM_DEPARTAMENTOSRowChanged As IM_DEPARTAMENTOSRowChangeEventHandler
        
        Public Event IM_DEPARTAMENTOSRowDeleting As IM_DEPARTAMENTOSRowChangeEventHandler
        
        Public Event IM_DEPARTAMENTOSRowDeleted As IM_DEPARTAMENTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_DEPARTAMENTOSRow(ByVal row As IM_DEPARTAMENTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_DEPARTAMENTOSRow(ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal DESCRIPCION As String, ByVal CANTIDAD_DIPUTADOS As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_DEPARTAMENTOSRow
            Dim rowIM_DEPARTAMENTOSRow As IM_DEPARTAMENTOSRow = CType(Me.NewRow,IM_DEPARTAMENTOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_DEPARTAMENTO, DESCRIPCION, CANTIDAD_DIPUTADOS, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            rowIM_DEPARTAMENTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_DEPARTAMENTOSRow)
            Return rowIM_DEPARTAMENTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_DEPARTAMENTO(ByVal CODIGO_DEPARTAMENTO As Decimal) As IM_DEPARTAMENTOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_DEPARTAMENTO}),IM_DEPARTAMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_DEPARTAMENTOSDataTable = CType(MyBase.Clone,IM_DEPARTAMENTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_DEPARTAMENTOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_DEPARTAMENTO = MyBase.Columns("CODIGO_DEPARTAMENTO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnCANTIDAD_DIPUTADOS = MyBase.Columns("CANTIDAD_DIPUTADOS")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_DEPARTAMENTO = New Global.System.Data.DataColumn("CODIGO_DEPARTAMENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DEPARTAMENTO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnCANTIDAD_DIPUTADOS = New Global.System.Data.DataColumn("CANTIDAD_DIPUTADOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_DIPUTADOS)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_DEPARTAMENTO}, true))
            Me.columnCODIGO_DEPARTAMENTO.AllowDBNull = false
            Me.columnCODIGO_DEPARTAMENTO.Unique = true
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnCANTIDAD_DIPUTADOS.AllowDBNull = false
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_DEPARTAMENTOSRow() As IM_DEPARTAMENTOSRow
            Return CType(Me.NewRow,IM_DEPARTAMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_DEPARTAMENTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_DEPARTAMENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_DEPARTAMENTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_DEPARTAMENTOSRowChanged(Me, New IM_DEPARTAMENTOSRowChangeEvent(CType(e.Row,IM_DEPARTAMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_DEPARTAMENTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_DEPARTAMENTOSRowChanging(Me, New IM_DEPARTAMENTOSRowChangeEvent(CType(e.Row,IM_DEPARTAMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_DEPARTAMENTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_DEPARTAMENTOSRowDeleted(Me, New IM_DEPARTAMENTOSRowChangeEvent(CType(e.Row,IM_DEPARTAMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_DEPARTAMENTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_DEPARTAMENTOSRowDeleting(Me, New IM_DEPARTAMENTOSRowChangeEvent(CType(e.Row,IM_DEPARTAMENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_DEPARTAMENTOSRow(ByVal row As IM_DEPARTAMENTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_DEPARTAMENTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_MUNICIPIOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_MUNICIPIOSRow)
        
        Private columnCODIGO_MUNICIPIO As Global.System.Data.DataColumn
        
        Private columnCODIGO_DEPARTAMENTO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD_REGIDORES As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_MUNICIPIOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MUNICIPIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MUNICIPIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DEPARTAMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DEPARTAMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDAD_REGIDORESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD_REGIDORES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_MUNICIPIOSRow
            Get
                Return CType(Me.Rows(index),IM_MUNICIPIOSRow)
            End Get
        End Property
        
        Public Event IM_MUNICIPIOSRowChanging As IM_MUNICIPIOSRowChangeEventHandler
        
        Public Event IM_MUNICIPIOSRowChanged As IM_MUNICIPIOSRowChangeEventHandler
        
        Public Event IM_MUNICIPIOSRowDeleting As IM_MUNICIPIOSRowChangeEventHandler
        
        Public Event IM_MUNICIPIOSRowDeleted As IM_MUNICIPIOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_MUNICIPIOSRow(ByVal row As IM_MUNICIPIOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_MUNICIPIOSRow(ByVal CODIGO_MUNICIPIO As Decimal, ByVal parentIM_DEPARTAMENTOSRowByIM_FK1_MUNICIPIO As IM_DEPARTAMENTOSRow, ByVal CANTIDAD_REGIDORES As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_MUNICIPIOSRow
            Dim rowIM_MUNICIPIOSRow As IM_MUNICIPIOSRow = CType(Me.NewRow,IM_MUNICIPIOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_MUNICIPIO, Nothing, CANTIDAD_REGIDORES, DESCRIPCION, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            If (Not (parentIM_DEPARTAMENTOSRowByIM_FK1_MUNICIPIO) Is Nothing) Then
                columnValuesArray(1) = parentIM_DEPARTAMENTOSRowByIM_FK1_MUNICIPIO(0)
            End If
            rowIM_MUNICIPIOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_MUNICIPIOSRow)
            Return rowIM_MUNICIPIOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_MUNICIPIOCODIGO_DEPARTAMENTO(ByVal CODIGO_MUNICIPIO As Decimal, ByVal CODIGO_DEPARTAMENTO As Decimal) As IM_MUNICIPIOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_MUNICIPIO, CODIGO_DEPARTAMENTO}),IM_MUNICIPIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_MUNICIPIOSDataTable = CType(MyBase.Clone,IM_MUNICIPIOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_MUNICIPIOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_MUNICIPIO = MyBase.Columns("CODIGO_MUNICIPIO")
            Me.columnCODIGO_DEPARTAMENTO = MyBase.Columns("CODIGO_DEPARTAMENTO")
            Me.columnCANTIDAD_REGIDORES = MyBase.Columns("CANTIDAD_REGIDORES")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_MUNICIPIO = New Global.System.Data.DataColumn("CODIGO_MUNICIPIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MUNICIPIO)
            Me.columnCODIGO_DEPARTAMENTO = New Global.System.Data.DataColumn("CODIGO_DEPARTAMENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DEPARTAMENTO)
            Me.columnCANTIDAD_REGIDORES = New Global.System.Data.DataColumn("CANTIDAD_REGIDORES", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD_REGIDORES)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_MUNICIPIO, Me.columnCODIGO_DEPARTAMENTO}, true))
            Me.columnCODIGO_MUNICIPIO.AllowDBNull = false
            Me.columnCODIGO_DEPARTAMENTO.AllowDBNull = false
            Me.columnCANTIDAD_REGIDORES.AllowDBNull = false
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_MUNICIPIOSRow() As IM_MUNICIPIOSRow
            Return CType(Me.NewRow,IM_MUNICIPIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_MUNICIPIOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_MUNICIPIOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_MUNICIPIOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_MUNICIPIOSRowChanged(Me, New IM_MUNICIPIOSRowChangeEvent(CType(e.Row,IM_MUNICIPIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_MUNICIPIOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_MUNICIPIOSRowChanging(Me, New IM_MUNICIPIOSRowChangeEvent(CType(e.Row,IM_MUNICIPIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_MUNICIPIOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_MUNICIPIOSRowDeleted(Me, New IM_MUNICIPIOSRowChangeEvent(CType(e.Row,IM_MUNICIPIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_MUNICIPIOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_MUNICIPIOSRowDeleting(Me, New IM_MUNICIPIOSRowChangeEvent(CType(e.Row,IM_MUNICIPIOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_MUNICIPIOSRow(ByVal row As IM_MUNICIPIOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_MUNICIPIOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_MOVIMIENTOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_MOVIMIENTOSRow)
        
        Private columnCODIGO_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnNOMBRE_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_MOVIMIENTOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBRE_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_MOVIMIENTOSRow
            Get
                Return CType(Me.Rows(index),IM_MOVIMIENTOSRow)
            End Get
        End Property
        
        Public Event IM_MOVIMIENTOSRowChanging As IM_MOVIMIENTOSRowChangeEventHandler
        
        Public Event IM_MOVIMIENTOSRowChanged As IM_MOVIMIENTOSRowChangeEventHandler
        
        Public Event IM_MOVIMIENTOSRowDeleting As IM_MOVIMIENTOSRowChangeEventHandler
        
        Public Event IM_MOVIMIENTOSRowDeleted As IM_MOVIMIENTOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_MOVIMIENTOSRow(ByVal row As IM_MOVIMIENTOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_MOVIMIENTOSRow(ByVal CODIGO_MOVIMIENTO As Decimal, ByVal NOMBRE_MOVIMIENTO As String, ByVal parentIM_PARTIDOS_POLITICOSRowByIM_FK1_MOVIMIENTOS As IM_PARTIDOS_POLITICOSRow) As IM_MOVIMIENTOSRow
            Dim rowIM_MOVIMIENTOSRow As IM_MOVIMIENTOSRow = CType(Me.NewRow,IM_MOVIMIENTOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_MOVIMIENTO, NOMBRE_MOVIMIENTO, Nothing}
            If (Not (parentIM_PARTIDOS_POLITICOSRowByIM_FK1_MOVIMIENTOS) Is Nothing) Then
                columnValuesArray(2) = parentIM_PARTIDOS_POLITICOSRowByIM_FK1_MOVIMIENTOS(0)
            End If
            rowIM_MOVIMIENTOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_MOVIMIENTOSRow)
            Return rowIM_MOVIMIENTOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_MOVIMIENTOCODIGO_PARTIDO(ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_PARTIDO As Decimal) As IM_MOVIMIENTOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_MOVIMIENTO, CODIGO_PARTIDO}),IM_MOVIMIENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_MOVIMIENTOSDataTable = CType(MyBase.Clone,IM_MOVIMIENTOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_MOVIMIENTOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_MOVIMIENTO = MyBase.Columns("CODIGO_MOVIMIENTO")
            Me.columnNOMBRE_MOVIMIENTO = MyBase.Columns("NOMBRE_MOVIMIENTO")
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_MOVIMIENTO = New Global.System.Data.DataColumn("CODIGO_MOVIMIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MOVIMIENTO)
            Me.columnNOMBRE_MOVIMIENTO = New Global.System.Data.DataColumn("NOMBRE_MOVIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_MOVIMIENTO)
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_MOVIMIENTO, Me.columnCODIGO_PARTIDO}, true))
            Me.columnCODIGO_MOVIMIENTO.AllowDBNull = false
            Me.columnNOMBRE_MOVIMIENTO.AllowDBNull = false
            Me.columnNOMBRE_MOVIMIENTO.MaxLength = 200
            Me.columnCODIGO_PARTIDO.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_MOVIMIENTOSRow() As IM_MOVIMIENTOSRow
            Return CType(Me.NewRow,IM_MOVIMIENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_MOVIMIENTOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_MOVIMIENTOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_MOVIMIENTOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_MOVIMIENTOSRowChanged(Me, New IM_MOVIMIENTOSRowChangeEvent(CType(e.Row,IM_MOVIMIENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_MOVIMIENTOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_MOVIMIENTOSRowChanging(Me, New IM_MOVIMIENTOSRowChangeEvent(CType(e.Row,IM_MOVIMIENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_MOVIMIENTOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_MOVIMIENTOSRowDeleted(Me, New IM_MOVIMIENTOSRowChangeEvent(CType(e.Row,IM_MOVIMIENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_MOVIMIENTOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_MOVIMIENTOSRowDeleting(Me, New IM_MOVIMIENTOSRowChangeEvent(CType(e.Row,IM_MOVIMIENTOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_MOVIMIENTOSRow(ByVal row As IM_MOVIMIENTOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_MOVIMIENTOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_IMAGENES_CANDIDATODataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_IMAGENES_CANDIDATORow)
        
        Private columnCODIGO_CANDIDATO As Global.System.Data.DataColumn
        
        Private columnCODIGO_REQUISITO As Global.System.Data.DataColumn
        
        Private columnIMAGEN As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_IMAGENES_CANDIDATO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CANDIDATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CANDIDATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_REQUISITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_REQUISITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMAGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMAGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_IMAGENES_CANDIDATORow
            Get
                Return CType(Me.Rows(index),IM_IMAGENES_CANDIDATORow)
            End Get
        End Property
        
        Public Event IM_IMAGENES_CANDIDATORowChanging As IM_IMAGENES_CANDIDATORowChangeEventHandler
        
        Public Event IM_IMAGENES_CANDIDATORowChanged As IM_IMAGENES_CANDIDATORowChangeEventHandler
        
        Public Event IM_IMAGENES_CANDIDATORowDeleting As IM_IMAGENES_CANDIDATORowChangeEventHandler
        
        Public Event IM_IMAGENES_CANDIDATORowDeleted As IM_IMAGENES_CANDIDATORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_IMAGENES_CANDIDATORow(ByVal row As IM_IMAGENES_CANDIDATORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_IMAGENES_CANDIDATORow(ByVal parentIM_CANDIDATOSRowByIM_FK1_IMAGENES_CANDIDATO As IM_CANDIDATOSRow, ByVal parentIM_REQUISITOSRowByIM_FK2_IMAGENES_CANDIDATO As IM_REQUISITOSRow, ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_IMAGENES_CANDIDATORow
            Dim rowIM_IMAGENES_CANDIDATORow As IM_IMAGENES_CANDIDATORow = CType(Me.NewRow,IM_IMAGENES_CANDIDATORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, IMAGEN, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            If (Not (parentIM_CANDIDATOSRowByIM_FK1_IMAGENES_CANDIDATO) Is Nothing) Then
                columnValuesArray(0) = parentIM_CANDIDATOSRowByIM_FK1_IMAGENES_CANDIDATO(0)
            End If
            If (Not (parentIM_REQUISITOSRowByIM_FK2_IMAGENES_CANDIDATO) Is Nothing) Then
                columnValuesArray(1) = parentIM_REQUISITOSRowByIM_FK2_IMAGENES_CANDIDATO(1)
            End If
            rowIM_IMAGENES_CANDIDATORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_IMAGENES_CANDIDATORow)
            Return rowIM_IMAGENES_CANDIDATORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_CANDIDATOCODIGO_REQUISITO(ByVal CODIGO_CANDIDATO As Decimal, ByVal CODIGO_REQUISITO As Decimal) As IM_IMAGENES_CANDIDATORow
            Return CType(Me.Rows.Find(New Object() {CODIGO_CANDIDATO, CODIGO_REQUISITO}),IM_IMAGENES_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_IMAGENES_CANDIDATODataTable = CType(MyBase.Clone,IM_IMAGENES_CANDIDATODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_IMAGENES_CANDIDATODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_CANDIDATO = MyBase.Columns("CODIGO_CANDIDATO")
            Me.columnCODIGO_REQUISITO = MyBase.Columns("CODIGO_REQUISITO")
            Me.columnIMAGEN = MyBase.Columns("IMAGEN")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_CANDIDATO = New Global.System.Data.DataColumn("CODIGO_CANDIDATO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CANDIDATO)
            Me.columnCODIGO_REQUISITO = New Global.System.Data.DataColumn("CODIGO_REQUISITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_REQUISITO)
            Me.columnIMAGEN = New Global.System.Data.DataColumn("IMAGEN", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMAGEN)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_CANDIDATO, Me.columnCODIGO_REQUISITO}, true))
            Me.columnCODIGO_CANDIDATO.AllowDBNull = false
            Me.columnCODIGO_REQUISITO.AllowDBNull = false
            Me.columnIMAGEN.AllowDBNull = false
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_IMAGENES_CANDIDATORow() As IM_IMAGENES_CANDIDATORow
            Return CType(Me.NewRow,IM_IMAGENES_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_IMAGENES_CANDIDATORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_IMAGENES_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_IMAGENES_CANDIDATORowChangedEvent) Is Nothing) Then
                RaiseEvent IM_IMAGENES_CANDIDATORowChanged(Me, New IM_IMAGENES_CANDIDATORowChangeEvent(CType(e.Row,IM_IMAGENES_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_IMAGENES_CANDIDATORowChangingEvent) Is Nothing) Then
                RaiseEvent IM_IMAGENES_CANDIDATORowChanging(Me, New IM_IMAGENES_CANDIDATORowChangeEvent(CType(e.Row,IM_IMAGENES_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_IMAGENES_CANDIDATORowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_IMAGENES_CANDIDATORowDeleted(Me, New IM_IMAGENES_CANDIDATORowChangeEvent(CType(e.Row,IM_IMAGENES_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_IMAGENES_CANDIDATORowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_IMAGENES_CANDIDATORowDeleting(Me, New IM_IMAGENES_CANDIDATORowChangeEvent(CType(e.Row,IM_IMAGENES_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_IMAGENES_CANDIDATORow(ByVal row As IM_IMAGENES_CANDIDATORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_IMAGENES_CANDIDATODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_PARTIDOS_POLITICOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_PARTIDOS_POLITICOSRow)
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_PARTIDOS_POLITICOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_PARTIDOS_POLITICOSRow
            Get
                Return CType(Me.Rows(index),IM_PARTIDOS_POLITICOSRow)
            End Get
        End Property
        
        Public Event IM_PARTIDOS_POLITICOSRowChanging As IM_PARTIDOS_POLITICOSRowChangeEventHandler
        
        Public Event IM_PARTIDOS_POLITICOSRowChanged As IM_PARTIDOS_POLITICOSRowChangeEventHandler
        
        Public Event IM_PARTIDOS_POLITICOSRowDeleting As IM_PARTIDOS_POLITICOSRowChangeEventHandler
        
        Public Event IM_PARTIDOS_POLITICOSRowDeleted As IM_PARTIDOS_POLITICOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_PARTIDOS_POLITICOSRow(ByVal row As IM_PARTIDOS_POLITICOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_PARTIDOS_POLITICOSRow(ByVal CODIGO_PARTIDO As Decimal, ByVal NOMBRE As String) As IM_PARTIDOS_POLITICOSRow
            Dim rowIM_PARTIDOS_POLITICOSRow As IM_PARTIDOS_POLITICOSRow = CType(Me.NewRow,IM_PARTIDOS_POLITICOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_PARTIDO, NOMBRE}
            rowIM_PARTIDOS_POLITICOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_PARTIDOS_POLITICOSRow)
            Return rowIM_PARTIDOS_POLITICOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_PARTIDO(ByVal CODIGO_PARTIDO As Decimal) As IM_PARTIDOS_POLITICOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_PARTIDO}),IM_PARTIDOS_POLITICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_PARTIDOS_POLITICOSDataTable = CType(MyBase.Clone,IM_PARTIDOS_POLITICOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_PARTIDOS_POLITICOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_PARTIDO}, true))
            Me.columnCODIGO_PARTIDO.AllowDBNull = false
            Me.columnCODIGO_PARTIDO.Unique = true
            Me.columnNOMBRE.AllowDBNull = false
            Me.columnNOMBRE.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_PARTIDOS_POLITICOSRow() As IM_PARTIDOS_POLITICOSRow
            Return CType(Me.NewRow,IM_PARTIDOS_POLITICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_PARTIDOS_POLITICOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_PARTIDOS_POLITICOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_PARTIDOS_POLITICOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_PARTIDOS_POLITICOSRowChanged(Me, New IM_PARTIDOS_POLITICOSRowChangeEvent(CType(e.Row,IM_PARTIDOS_POLITICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_PARTIDOS_POLITICOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_PARTIDOS_POLITICOSRowChanging(Me, New IM_PARTIDOS_POLITICOSRowChangeEvent(CType(e.Row,IM_PARTIDOS_POLITICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_PARTIDOS_POLITICOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_PARTIDOS_POLITICOSRowDeleted(Me, New IM_PARTIDOS_POLITICOSRowChangeEvent(CType(e.Row,IM_PARTIDOS_POLITICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_PARTIDOS_POLITICOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_PARTIDOS_POLITICOSRowDeleting(Me, New IM_PARTIDOS_POLITICOSRowChangeEvent(CType(e.Row,IM_PARTIDOS_POLITICOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_PARTIDOS_POLITICOSRow(ByVal row As IM_PARTIDOS_POLITICOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_PARTIDOS_POLITICOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_NIVEL_ELECTIVODataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_NIVEL_ELECTIVORow)
        
        Private columnCODIGO_NIVEL_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_NIVEL_ELECTIVO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_NIVEL_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_NIVEL_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_NIVEL_ELECTIVORow
            Get
                Return CType(Me.Rows(index),IM_NIVEL_ELECTIVORow)
            End Get
        End Property
        
        Public Event IM_NIVEL_ELECTIVORowChanging As IM_NIVEL_ELECTIVORowChangeEventHandler
        
        Public Event IM_NIVEL_ELECTIVORowChanged As IM_NIVEL_ELECTIVORowChangeEventHandler
        
        Public Event IM_NIVEL_ELECTIVORowDeleting As IM_NIVEL_ELECTIVORowChangeEventHandler
        
        Public Event IM_NIVEL_ELECTIVORowDeleted As IM_NIVEL_ELECTIVORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_NIVEL_ELECTIVORow(ByVal row As IM_NIVEL_ELECTIVORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_NIVEL_ELECTIVORow(ByVal CODIGO_NIVEL_ELECTIVO As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date) As IM_NIVEL_ELECTIVORow
            Dim rowIM_NIVEL_ELECTIVORow As IM_NIVEL_ELECTIVORow = CType(Me.NewRow,IM_NIVEL_ELECTIVORow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_NIVEL_ELECTIVO, DESCRIPCION, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION}
            rowIM_NIVEL_ELECTIVORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_NIVEL_ELECTIVORow)
            Return rowIM_NIVEL_ELECTIVORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_NIVEL_ELECTIVO(ByVal CODIGO_NIVEL_ELECTIVO As Decimal) As IM_NIVEL_ELECTIVORow
            Return CType(Me.Rows.Find(New Object() {CODIGO_NIVEL_ELECTIVO}),IM_NIVEL_ELECTIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_NIVEL_ELECTIVODataTable = CType(MyBase.Clone,IM_NIVEL_ELECTIVODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_NIVEL_ELECTIVODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_NIVEL_ELECTIVO = MyBase.Columns("CODIGO_NIVEL_ELECTIVO")
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_NIVEL_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_NIVEL_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_NIVEL_ELECTIVO)
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_NIVEL_ELECTIVO}, true))
            Me.columnCODIGO_NIVEL_ELECTIVO.AllowDBNull = false
            Me.columnCODIGO_NIVEL_ELECTIVO.Unique = true
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnADICIONADO_POR.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnFECHA_ADICION.AllowDBNull = false
            Me.columnMODIFICADO_POR.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_NIVEL_ELECTIVORow() As IM_NIVEL_ELECTIVORow
            Return CType(Me.NewRow,IM_NIVEL_ELECTIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_NIVEL_ELECTIVORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_NIVEL_ELECTIVORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_NIVEL_ELECTIVORowChangedEvent) Is Nothing) Then
                RaiseEvent IM_NIVEL_ELECTIVORowChanged(Me, New IM_NIVEL_ELECTIVORowChangeEvent(CType(e.Row,IM_NIVEL_ELECTIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_NIVEL_ELECTIVORowChangingEvent) Is Nothing) Then
                RaiseEvent IM_NIVEL_ELECTIVORowChanging(Me, New IM_NIVEL_ELECTIVORowChangeEvent(CType(e.Row,IM_NIVEL_ELECTIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_NIVEL_ELECTIVORowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_NIVEL_ELECTIVORowDeleted(Me, New IM_NIVEL_ELECTIVORowChangeEvent(CType(e.Row,IM_NIVEL_ELECTIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_NIVEL_ELECTIVORowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_NIVEL_ELECTIVORowDeleting(Me, New IM_NIVEL_ELECTIVORowChangeEvent(CType(e.Row,IM_NIVEL_ELECTIVORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_NIVEL_ELECTIVORow(ByVal row As IM_NIVEL_ELECTIVORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_NIVEL_ELECTIVODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TA_CANDIDATOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of TA_CANDIDATOSRow)
        
        Private columnCODIGO_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CANDIDATOS As Global.System.Data.DataColumn
        
        Private columnNOMBRE As Global.System.Data.DataColumn
        
        Private columnPOSICION As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnAPELLIDO As Global.System.Data.DataColumn
        
        Private columnCODIGO_DEPARTAMENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_MUNICIPIO As Global.System.Data.DataColumn
        
        Private columnIDENTIDAD As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        Private columnNOMBRE_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnPARTIDO As Global.System.Data.DataColumn
        
        Private columnCARGO As Global.System.Data.DataColumn
        
        Private columnDEPARTAMENTO As Global.System.Data.DataColumn
        
        Private columnMUNICIPIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TA_CANDIDATOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CANDIDATOSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CANDIDATOS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POSICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property APELLIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAPELLIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_DEPARTAMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_DEPARTAMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MUNICIPIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MUNICIPIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDENTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMBRE_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOMBRE_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARGOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARGO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPARTAMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPARTAMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUNICIPIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUNICIPIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TA_CANDIDATOSRow
            Get
                Return CType(Me.Rows(index),TA_CANDIDATOSRow)
            End Get
        End Property
        
        Public Event TA_CANDIDATOSRowChanging As TA_CANDIDATOSRowChangeEventHandler
        
        Public Event TA_CANDIDATOSRowChanged As TA_CANDIDATOSRowChangeEventHandler
        
        Public Event TA_CANDIDATOSRowDeleting As TA_CANDIDATOSRowChangeEventHandler
        
        Public Event TA_CANDIDATOSRowDeleted As TA_CANDIDATOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTA_CANDIDATOSRow(ByVal row As TA_CANDIDATOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTA_CANDIDATOSRow( _
                    ByVal CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS1 As IM_PARTIDOS_POLITICOSRow,  _
                    ByVal CODIGO_CANDIDATOS As Decimal,  _
                    ByVal NOMBRE As String,  _
                    ByVal POSICION As Decimal,  _
                    ByVal parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS1 As IM_CARGOS_ELECTIVOSRow,  _
                    ByVal APELLIDO As String,  _
                    ByVal CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal CODIGO_MUNICIPIO As Decimal,  _
                    ByVal IDENTIDAD As String,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Date,  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Date,  _
                    ByVal NOMBRE_MOVIMIENTO As String,  _
                    ByVal PARTIDO As String,  _
                    ByVal CARGO As String,  _
                    ByVal DEPARTAMENTO As String,  _
                    ByVal MUNICIPIO As String) As TA_CANDIDATOSRow
            Dim rowTA_CANDIDATOSRow As TA_CANDIDATOSRow = CType(Me.NewRow,TA_CANDIDATOSRow)
            Dim columnValuesArray() As Object = New Object() {CODIGO_MOVIMIENTO, Nothing, CODIGO_CANDIDATOS, NOMBRE, POSICION, Nothing, APELLIDO, CODIGO_DEPARTAMENTO, CODIGO_MUNICIPIO, IDENTIDAD, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, NOMBRE_MOVIMIENTO, PARTIDO, CARGO, DEPARTAMENTO, MUNICIPIO}
            If (Not (parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS1) Is Nothing) Then
                columnValuesArray(1) = parentIM_PARTIDOS_POLITICOSRowByIM_FK4_CANDIDATOS1(0)
            End If
            If (Not (parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS1) Is Nothing) Then
                columnValuesArray(5) = parentIM_CARGOS_ELECTIVOSRowByIM_FK3_CANDIDATOS1(0)
            End If
            rowTA_CANDIDATOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTA_CANDIDATOSRow)
            Return rowTA_CANDIDATOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TA_CANDIDATOSDataTable = CType(MyBase.Clone,TA_CANDIDATOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TA_CANDIDATOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_MOVIMIENTO = MyBase.Columns("CODIGO_MOVIMIENTO")
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
            Me.columnCODIGO_CANDIDATOS = MyBase.Columns("CODIGO_CANDIDATOS")
            Me.columnNOMBRE = MyBase.Columns("NOMBRE")
            Me.columnPOSICION = MyBase.Columns("POSICION")
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnAPELLIDO = MyBase.Columns("APELLIDO")
            Me.columnCODIGO_DEPARTAMENTO = MyBase.Columns("CODIGO_DEPARTAMENTO")
            Me.columnCODIGO_MUNICIPIO = MyBase.Columns("CODIGO_MUNICIPIO")
            Me.columnIDENTIDAD = MyBase.Columns("IDENTIDAD")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
            Me.columnNOMBRE_MOVIMIENTO = MyBase.Columns("NOMBRE_MOVIMIENTO")
            Me.columnPARTIDO = MyBase.Columns("PARTIDO")
            Me.columnCARGO = MyBase.Columns("CARGO")
            Me.columnDEPARTAMENTO = MyBase.Columns("DEPARTAMENTO")
            Me.columnMUNICIPIO = MyBase.Columns("MUNICIPIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_MOVIMIENTO = New Global.System.Data.DataColumn("CODIGO_MOVIMIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MOVIMIENTO)
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.columnCODIGO_CANDIDATOS = New Global.System.Data.DataColumn("CODIGO_CANDIDATOS", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CANDIDATOS)
            Me.columnNOMBRE = New Global.System.Data.DataColumn("NOMBRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE)
            Me.columnPOSICION = New Global.System.Data.DataColumn("POSICION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSICION)
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnAPELLIDO = New Global.System.Data.DataColumn("APELLIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAPELLIDO)
            Me.columnCODIGO_DEPARTAMENTO = New Global.System.Data.DataColumn("CODIGO_DEPARTAMENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_DEPARTAMENTO)
            Me.columnCODIGO_MUNICIPIO = New Global.System.Data.DataColumn("CODIGO_MUNICIPIO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MUNICIPIO)
            Me.columnIDENTIDAD = New Global.System.Data.DataColumn("IDENTIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTIDAD)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.columnNOMBRE_MOVIMIENTO = New Global.System.Data.DataColumn("NOMBRE_MOVIMIENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOMBRE_MOVIMIENTO)
            Me.columnPARTIDO = New Global.System.Data.DataColumn("PARTIDO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARTIDO)
            Me.columnCARGO = New Global.System.Data.DataColumn("CARGO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARGO)
            Me.columnDEPARTAMENTO = New Global.System.Data.DataColumn("DEPARTAMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPARTAMENTO)
            Me.columnMUNICIPIO = New Global.System.Data.DataColumn("MUNICIPIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUNICIPIO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_CANDIDATOS}, false))
            Me.columnCODIGO_CANDIDATOS.Unique = true
            Me.columnNOMBRE.MaxLength = 100
            Me.columnAPELLIDO.MaxLength = 100
            Me.columnIDENTIDAD.MaxLength = 15
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnMODIFICADO_POR.MaxLength = 10
            Me.columnNOMBRE_MOVIMIENTO.MaxLength = 200
            Me.columnPARTIDO.MaxLength = 100
            Me.columnCARGO.MaxLength = 100
            Me.columnDEPARTAMENTO.MaxLength = 100
            Me.columnMUNICIPIO.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTA_CANDIDATOSRow() As TA_CANDIDATOSRow
            Return CType(Me.NewRow,TA_CANDIDATOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TA_CANDIDATOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TA_CANDIDATOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TA_CANDIDATOSRowChangedEvent) Is Nothing) Then
                RaiseEvent TA_CANDIDATOSRowChanged(Me, New TA_CANDIDATOSRowChangeEvent(CType(e.Row,TA_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TA_CANDIDATOSRowChangingEvent) Is Nothing) Then
                RaiseEvent TA_CANDIDATOSRowChanging(Me, New TA_CANDIDATOSRowChangeEvent(CType(e.Row,TA_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TA_CANDIDATOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TA_CANDIDATOSRowDeleted(Me, New TA_CANDIDATOSRowChangeEvent(CType(e.Row,TA_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TA_CANDIDATOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TA_CANDIDATOSRowDeleting(Me, New TA_CANDIDATOSRowChangeEvent(CType(e.Row,TA_CANDIDATOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTA_CANDIDATOSRow(ByVal row As TA_CANDIDATOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TA_CANDIDATOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_REQUISITOS_X_CANDIDATODataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_REQUISITOS_X_CANDIDATORow)
        
        Private columnCODIGO_CANDIDATO As Global.System.Data.DataColumn
        
        Private columnCODIGO_PARTIDO As Global.System.Data.DataColumn
        
        Private columnCODIGO_MOVIMIENTO As Global.System.Data.DataColumn
        
        Private columnCODIGO_REQUISITO As Global.System.Data.DataColumn
        
        Private columnCANTIDAD As Global.System.Data.DataColumn
        
        Private columnIMAGEN As Global.System.Data.DataColumn
        
        Private columnADICIONADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_ADICION As Global.System.Data.DataColumn
        
        Private columnMODIFICADO_POR As Global.System.Data.DataColumn
        
        Private columnFECHA_MODIFICACION As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_REQUISITOS_X_CANDIDATO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CANDIDATOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CANDIDATO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_PARTIDOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_PARTIDO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_MOVIMIENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_MOVIMIENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_REQUISITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_REQUISITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CANTIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANTIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMAGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMAGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADICIONADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADICIONADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_ADICIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_ADICION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODIFICADO_PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODIFICADO_POR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHA_MODIFICACIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA_MODIFICACION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_REQUISITOS_X_CANDIDATORow
            Get
                Return CType(Me.Rows(index),IM_REQUISITOS_X_CANDIDATORow)
            End Get
        End Property
        
        Public Event IM_REQUISITOS_X_CANDIDATORowChanging As IM_REQUISITOS_X_CANDIDATORowChangeEventHandler
        
        Public Event IM_REQUISITOS_X_CANDIDATORowChanged As IM_REQUISITOS_X_CANDIDATORowChangeEventHandler
        
        Public Event IM_REQUISITOS_X_CANDIDATORowDeleting As IM_REQUISITOS_X_CANDIDATORowChangeEventHandler
        
        Public Event IM_REQUISITOS_X_CANDIDATORowDeleted As IM_REQUISITOS_X_CANDIDATORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_REQUISITOS_X_CANDIDATORow(ByVal row As IM_REQUISITOS_X_CANDIDATORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_REQUISITOS_X_CANDIDATORow(ByVal parentIM_CANDIDATOSRowByIM_FK1_REQUISITOS_X_CANDIDATO As IM_CANDIDATOSRow, ByVal CODIGO_PARTIDO As Decimal, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal parentIM_REQUISITOSRowByIM_FK4_REQUISITOS_X_CANDIDATO As IM_REQUISITOSRow, ByVal CANTIDAD As Decimal, ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Date, ByVal ESTADO As String) As IM_REQUISITOS_X_CANDIDATORow
            Dim rowIM_REQUISITOS_X_CANDIDATORow As IM_REQUISITOS_X_CANDIDATORow = CType(Me.NewRow,IM_REQUISITOS_X_CANDIDATORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CODIGO_PARTIDO, CODIGO_MOVIMIENTO, Nothing, CANTIDAD, IMAGEN, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, ESTADO}
            If (Not (parentIM_CANDIDATOSRowByIM_FK1_REQUISITOS_X_CANDIDATO) Is Nothing) Then
                columnValuesArray(0) = parentIM_CANDIDATOSRowByIM_FK1_REQUISITOS_X_CANDIDATO(0)
            End If
            If (Not (parentIM_REQUISITOSRowByIM_FK4_REQUISITOS_X_CANDIDATO) Is Nothing) Then
                columnValuesArray(3) = parentIM_REQUISITOSRowByIM_FK4_REQUISITOS_X_CANDIDATO(1)
            End If
            rowIM_REQUISITOS_X_CANDIDATORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_REQUISITOS_X_CANDIDATORow)
            Return rowIM_REQUISITOS_X_CANDIDATORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_CANDIDATOCODIGO_PARTIDOCODIGO_MOVIMIENTOCODIGO_REQUISITO(ByVal CODIGO_CANDIDATO As Decimal, ByVal CODIGO_PARTIDO As Decimal, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_REQUISITO As Decimal) As IM_REQUISITOS_X_CANDIDATORow
            Return CType(Me.Rows.Find(New Object() {CODIGO_CANDIDATO, CODIGO_PARTIDO, CODIGO_MOVIMIENTO, CODIGO_REQUISITO}),IM_REQUISITOS_X_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_REQUISITOS_X_CANDIDATODataTable = CType(MyBase.Clone,IM_REQUISITOS_X_CANDIDATODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_REQUISITOS_X_CANDIDATODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODIGO_CANDIDATO = MyBase.Columns("CODIGO_CANDIDATO")
            Me.columnCODIGO_PARTIDO = MyBase.Columns("CODIGO_PARTIDO")
            Me.columnCODIGO_MOVIMIENTO = MyBase.Columns("CODIGO_MOVIMIENTO")
            Me.columnCODIGO_REQUISITO = MyBase.Columns("CODIGO_REQUISITO")
            Me.columnCANTIDAD = MyBase.Columns("CANTIDAD")
            Me.columnIMAGEN = MyBase.Columns("IMAGEN")
            Me.columnADICIONADO_POR = MyBase.Columns("ADICIONADO_POR")
            Me.columnFECHA_ADICION = MyBase.Columns("FECHA_ADICION")
            Me.columnMODIFICADO_POR = MyBase.Columns("MODIFICADO_POR")
            Me.columnFECHA_MODIFICACION = MyBase.Columns("FECHA_MODIFICACION")
            Me.columnESTADO = MyBase.Columns("ESTADO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODIGO_CANDIDATO = New Global.System.Data.DataColumn("CODIGO_CANDIDATO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CANDIDATO)
            Me.columnCODIGO_PARTIDO = New Global.System.Data.DataColumn("CODIGO_PARTIDO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_PARTIDO)
            Me.columnCODIGO_MOVIMIENTO = New Global.System.Data.DataColumn("CODIGO_MOVIMIENTO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_MOVIMIENTO)
            Me.columnCODIGO_REQUISITO = New Global.System.Data.DataColumn("CODIGO_REQUISITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_REQUISITO)
            Me.columnCANTIDAD = New Global.System.Data.DataColumn("CANTIDAD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANTIDAD)
            Me.columnIMAGEN = New Global.System.Data.DataColumn("IMAGEN", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMAGEN)
            Me.columnADICIONADO_POR = New Global.System.Data.DataColumn("ADICIONADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADICIONADO_POR)
            Me.columnFECHA_ADICION = New Global.System.Data.DataColumn("FECHA_ADICION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_ADICION)
            Me.columnMODIFICADO_POR = New Global.System.Data.DataColumn("MODIFICADO_POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODIFICADO_POR)
            Me.columnFECHA_MODIFICACION = New Global.System.Data.DataColumn("FECHA_MODIFICACION", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA_MODIFICACION)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_CANDIDATO, Me.columnCODIGO_PARTIDO, Me.columnCODIGO_MOVIMIENTO, Me.columnCODIGO_REQUISITO}, true))
            Me.columnCODIGO_CANDIDATO.AllowDBNull = false
            Me.columnCODIGO_PARTIDO.AllowDBNull = false
            Me.columnCODIGO_MOVIMIENTO.AllowDBNull = false
            Me.columnCODIGO_REQUISITO.AllowDBNull = false
            Me.columnADICIONADO_POR.MaxLength = 10
            Me.columnMODIFICADO_POR.MaxLength = 10
            Me.columnESTADO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_REQUISITOS_X_CANDIDATORow() As IM_REQUISITOS_X_CANDIDATORow
            Return CType(Me.NewRow,IM_REQUISITOS_X_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_REQUISITOS_X_CANDIDATORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_REQUISITOS_X_CANDIDATORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_REQUISITOS_X_CANDIDATORowChangedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS_X_CANDIDATORowChanged(Me, New IM_REQUISITOS_X_CANDIDATORowChangeEvent(CType(e.Row,IM_REQUISITOS_X_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_REQUISITOS_X_CANDIDATORowChangingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS_X_CANDIDATORowChanging(Me, New IM_REQUISITOS_X_CANDIDATORowChangeEvent(CType(e.Row,IM_REQUISITOS_X_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_REQUISITOS_X_CANDIDATORowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS_X_CANDIDATORowDeleted(Me, New IM_REQUISITOS_X_CANDIDATORowChangeEvent(CType(e.Row,IM_REQUISITOS_X_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_REQUISITOS_X_CANDIDATORowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS_X_CANDIDATORowDeleting(Me, New IM_REQUISITOS_X_CANDIDATORowChangeEvent(CType(e.Row,IM_REQUISITOS_X_CANDIDATORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_REQUISITOS_X_CANDIDATORow(ByVal row As IM_REQUISITOS_X_CANDIDATORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_REQUISITOS_X_CANDIDATODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_REQUISITOSDataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_REQUISITOSRow)
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnCODIGO_REQUISITO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnAUTOMATICO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnIMAGEN As Global.System.Data.DataColumn
        
        Private columnCumplido As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_REQUISITOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_REQUISITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_REQUISITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUTOMATICOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTOMATICO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMAGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMAGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CumplidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCumplido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_REQUISITOSRow
            Get
                Return CType(Me.Rows(index),IM_REQUISITOSRow)
            End Get
        End Property
        
        Public Event IM_REQUISITOSRowChanging As IM_REQUISITOSRowChangeEventHandler
        
        Public Event IM_REQUISITOSRowChanged As IM_REQUISITOSRowChangeEventHandler
        
        Public Event IM_REQUISITOSRowDeleting As IM_REQUISITOSRowChangeEventHandler
        
        Public Event IM_REQUISITOSRowDeleted As IM_REQUISITOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_REQUISITOSRow(ByVal row As IM_REQUISITOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_REQUISITOSRow(ByVal DESCRIPCION As String, ByVal CODIGO_REQUISITO As Decimal, ByVal parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS As IM_CARGOS_ELECTIVOSRow, ByVal AUTOMATICO As String, ByVal ESTADO As String, ByVal IMAGEN() As Byte, ByVal Cumplido As String) As IM_REQUISITOSRow
            Dim rowIM_REQUISITOSRow As IM_REQUISITOSRow = CType(Me.NewRow,IM_REQUISITOSRow)
            Dim columnValuesArray() As Object = New Object() {DESCRIPCION, CODIGO_REQUISITO, Nothing, AUTOMATICO, ESTADO, IMAGEN, Cumplido}
            If (Not (parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS) Is Nothing) Then
                columnValuesArray(2) = parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS(0)
            End If
            rowIM_REQUISITOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_REQUISITOSRow)
            Return rowIM_REQUISITOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_REQUISITO(ByVal CODIGO_REQUISITO As Decimal) As IM_REQUISITOSRow
            Return CType(Me.Rows.Find(New Object() {CODIGO_REQUISITO}),IM_REQUISITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_REQUISITOSDataTable = CType(MyBase.Clone,IM_REQUISITOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_REQUISITOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnCODIGO_REQUISITO = MyBase.Columns("CODIGO_REQUISITO")
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnAUTOMATICO = MyBase.Columns("AUTOMATICO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnIMAGEN = MyBase.Columns("IMAGEN")
            Me.columnCumplido = MyBase.Columns("Cumplido")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnCODIGO_REQUISITO = New Global.System.Data.DataColumn("CODIGO_REQUISITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_REQUISITO)
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnAUTOMATICO = New Global.System.Data.DataColumn("AUTOMATICO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTOMATICO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnIMAGEN = New Global.System.Data.DataColumn("IMAGEN", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMAGEN)
            Me.columnCumplido = New Global.System.Data.DataColumn("Cumplido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCumplido)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_REQUISITO}, true))
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnCODIGO_REQUISITO.AllowDBNull = false
            Me.columnCODIGO_REQUISITO.Unique = true
            Me.columnCODIGO_CARGO_ELECTIVO.AllowDBNull = false
            Me.columnAUTOMATICO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_REQUISITOSRow() As IM_REQUISITOSRow
            Return CType(Me.NewRow,IM_REQUISITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_REQUISITOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_REQUISITOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_REQUISITOSRowChangedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOSRowChanged(Me, New IM_REQUISITOSRowChangeEvent(CType(e.Row,IM_REQUISITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_REQUISITOSRowChangingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOSRowChanging(Me, New IM_REQUISITOSRowChangeEvent(CType(e.Row,IM_REQUISITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_REQUISITOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOSRowDeleted(Me, New IM_REQUISITOSRowChangeEvent(CType(e.Row,IM_REQUISITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_REQUISITOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOSRowDeleting(Me, New IM_REQUISITOSRowChangeEvent(CType(e.Row,IM_REQUISITOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_REQUISITOSRow(ByVal row As IM_REQUISITOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_REQUISITOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class IM_REQUISITOS1DataTable
        Inherits Global.System.Data.TypedTableBase(Of IM_REQUISITOS1Row)
        
        Private columnDESCRIPCION As Global.System.Data.DataColumn
        
        Private columnCODIGO_REQUISITO As Global.System.Data.DataColumn
        
        Private columnCODIGO_CARGO_ELECTIVO As Global.System.Data.DataColumn
        
        Private columnAUTOMATICO As Global.System.Data.DataColumn
        
        Private columnESTADO As Global.System.Data.DataColumn
        
        Private columnIMAGEN As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "IM_REQUISITOS1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_REQUISITOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_REQUISITO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODIGO_CARGO_ELECTIVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODIGO_CARGO_ELECTIVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUTOMATICOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTOMATICO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTADOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTADO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IMAGENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIMAGEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As IM_REQUISITOS1Row
            Get
                Return CType(Me.Rows(index),IM_REQUISITOS1Row)
            End Get
        End Property
        
        Public Event IM_REQUISITOS1RowChanging As IM_REQUISITOS1RowChangeEventHandler
        
        Public Event IM_REQUISITOS1RowChanged As IM_REQUISITOS1RowChangeEventHandler
        
        Public Event IM_REQUISITOS1RowDeleting As IM_REQUISITOS1RowChangeEventHandler
        
        Public Event IM_REQUISITOS1RowDeleted As IM_REQUISITOS1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddIM_REQUISITOS1Row(ByVal row As IM_REQUISITOS1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddIM_REQUISITOS1Row(ByVal DESCRIPCION As String, ByVal CODIGO_REQUISITO As Decimal, ByVal parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS1 As IM_CARGOS_ELECTIVOSRow, ByVal AUTOMATICO As String, ByVal ESTADO As String, ByVal IMAGEN As String) As IM_REQUISITOS1Row
            Dim rowIM_REQUISITOS1Row As IM_REQUISITOS1Row = CType(Me.NewRow,IM_REQUISITOS1Row)
            Dim columnValuesArray() As Object = New Object() {DESCRIPCION, CODIGO_REQUISITO, Nothing, AUTOMATICO, ESTADO, IMAGEN}
            If (Not (parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS1) Is Nothing) Then
                columnValuesArray(2) = parentIM_CARGOS_ELECTIVOSRowByIM_FK1_REQUISITOS1(0)
            End If
            rowIM_REQUISITOS1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowIM_REQUISITOS1Row)
            Return rowIM_REQUISITOS1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCODIGO_REQUISITO(ByVal CODIGO_REQUISITO As Decimal) As IM_REQUISITOS1Row
            Return CType(Me.Rows.Find(New Object() {CODIGO_REQUISITO}),IM_REQUISITOS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As IM_REQUISITOS1DataTable = CType(MyBase.Clone,IM_REQUISITOS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New IM_REQUISITOS1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDESCRIPCION = MyBase.Columns("DESCRIPCION")
            Me.columnCODIGO_REQUISITO = MyBase.Columns("CODIGO_REQUISITO")
            Me.columnCODIGO_CARGO_ELECTIVO = MyBase.Columns("CODIGO_CARGO_ELECTIVO")
            Me.columnAUTOMATICO = MyBase.Columns("AUTOMATICO")
            Me.columnESTADO = MyBase.Columns("ESTADO")
            Me.columnIMAGEN = MyBase.Columns("IMAGEN")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDESCRIPCION = New Global.System.Data.DataColumn("DESCRIPCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCION)
            Me.columnCODIGO_REQUISITO = New Global.System.Data.DataColumn("CODIGO_REQUISITO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_REQUISITO)
            Me.columnCODIGO_CARGO_ELECTIVO = New Global.System.Data.DataColumn("CODIGO_CARGO_ELECTIVO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODIGO_CARGO_ELECTIVO)
            Me.columnAUTOMATICO = New Global.System.Data.DataColumn("AUTOMATICO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTOMATICO)
            Me.columnESTADO = New Global.System.Data.DataColumn("ESTADO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTADO)
            Me.columnIMAGEN = New Global.System.Data.DataColumn("IMAGEN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIMAGEN)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCODIGO_REQUISITO}, true))
            Me.columnDESCRIPCION.AllowDBNull = false
            Me.columnDESCRIPCION.MaxLength = 100
            Me.columnCODIGO_REQUISITO.AllowDBNull = false
            Me.columnCODIGO_REQUISITO.Unique = true
            Me.columnCODIGO_CARGO_ELECTIVO.AllowDBNull = false
            Me.columnAUTOMATICO.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewIM_REQUISITOS1Row() As IM_REQUISITOS1Row
            Return CType(Me.NewRow,IM_REQUISITOS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New IM_REQUISITOS1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(IM_REQUISITOS1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IM_REQUISITOS1RowChangedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS1RowChanged(Me, New IM_REQUISITOS1RowChangeEvent(CType(e.Row,IM_REQUISITOS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IM_REQUISITOS1RowChangingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS1RowChanging(Me, New IM_REQUISITOS1RowChangeEvent(CType(e.Row,IM_REQUISITOS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IM_REQUISITOS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS1RowDeleted(Me, New IM_REQUISITOS1RowChangeEvent(CType(e.Row,IM_REQUISITOS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IM_REQUISITOS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent IM_REQUISITOS1RowDeleting(Me, New IM_REQUISITOS1RowChangeEvent(CType(e.Row,IM_REQUISITOS1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveIM_REQUISITOS1Row(ByVal row As IM_REQUISITOS1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSInscripcionCandidatos = New DSInscripcionCandidatos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IM_REQUISITOS1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_CANDIDATOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_CANDIDATOS As IM_CANDIDATOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_CANDIDATOS = CType(Me.Table,IM_CANDIDATOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CANDIDATOS() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_CANDIDATOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_CANDIDATOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSICION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS.POSICIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSICION' in table 'IM_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.POSICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APELLIDO() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.APELLIDOColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.APELLIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DEPARTAMENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_DEPARTAMENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_DEPARTAMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MUNICIPIO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_MUNICIPIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_MUNICIPIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MOVIMIENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_MOVIMIENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.IDENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.CODIGO_PARTIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_MUNICIPIOSRowParent() As IM_MUNICIPIOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_CANDIDATOS")),IM_MUNICIPIOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_CANDIDATOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK3_CANDIDATOS")),IM_CARGOS_ELECTIVOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK3_CANDIDATOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PARTIDOS_POLITICOSRow() As IM_PARTIDOS_POLITICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK4_CANDIDATOS")),IM_PARTIDOS_POLITICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK4_CANDIDATOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSICIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS.POSICIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSICIONNull()
            Me(Me.tableIM_CANDIDATOS.POSICIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_CANDIDATOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_CANDIDATOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_IMAGENES_CANDIDATORows() As IM_IMAGENES_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK1_IMAGENES_CANDIDATO") Is Nothing) Then
                Return New IM_IMAGENES_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_IMAGENES_CANDIDATO")),IM_IMAGENES_CANDIDATORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOS_X_CANDIDATORows() As IM_REQUISITOS_X_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK1_REQUISITOS_X_CANDIDATO") Is Nothing) Then
                Return New IM_REQUISITOS_X_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_REQUISITOS_X_CANDIDATO")),IM_REQUISITOS_X_CANDIDATORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_CANDIDATOS_PUEDEN_REPETIRRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_CANDIDATOS_PUEDEN_REPETIR As IM_CANDIDATOS_PUEDEN_REPETIRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_CANDIDATOS_PUEDEN_REPETIR = CType(Me.Table,IM_CANDIDATOS_PUEDEN_REPETIRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.IDENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YA_INGRESADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.YA_INGRESADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YA_INGRESADO' in table 'IM_CANDIDATOS_PUEDEN_REPETIR' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.YA_INGRESADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.CODIGO_CARGO_ELECTIVOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_CARGO_ELECTIVO' in table 'IM_CANDIDATOS_PUEDEN_REPET"& _ 
                            "IR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_CANDIDATOS_PUEDEN_REPETIR' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_CANDIDATOS_PUEDEN_REPETIR'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_CAND_PUEDEN_REPETIR")),IM_CARGOS_ELECTIVOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_CAND_PUEDEN_REPETIR"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYA_INGRESADONull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.YA_INGRESADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYA_INGRESADONull()
            Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.YA_INGRESADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_CARGO_ELECTIVONull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.CODIGO_CARGO_ELECTIVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_CARGO_ELECTIVONull()
            Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.CODIGO_CARGO_ELECTIVOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_CANDIDATOS_PUEDEN_REPETIR.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_CANDIDATOS_REPETIDOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_CANDIDATOS_REPETIDOS As IM_CANDIDATOS_REPETIDOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_CANDIDATOS_REPETIDOS = CType(Me.Table,IM_CANDIDATOS_REPETIDOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIDAD() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.IDENTIDADColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.IDENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MOVIMIENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_MOVIMIENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_PARTIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_CANDIDATOS_REPETIDOS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_CANDIDATOS_REPETIDOS' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_MOVIMIENTOSRowParent() As IM_MOVIMIENTOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_CANDIDATOS_REPETIDOS")),IM_MOVIMIENTOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_CANDIDATOS_REPETIDOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_REPETIDOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_CANDIDATOS_REPETIDOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_CANDIDATOS_REPETIDOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_CARGOS_ELECTIVOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_CARGOS_ELECTIVOS As IM_CARGOS_ELECTIVOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_CARGOS_ELECTIVOS = CType(Me.Table,IM_CARGOS_ELECTIVOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_SUPERIOR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_SUPERIORColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_CARGO_SUPERIOR' in table 'IM_CARGOS_ELECTIVOS' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_SUPERIORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_NIVEL_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_NIVEL_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_NIVEL_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_CARGOS_ELECTIVOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_CARGOS_ELECTIVOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_CARGOS_ELECTIVOS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_CARGOS_ELECTIVOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_NIVEL_ELECTIVORow() As IM_NIVEL_ELECTIVORow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_CARGOS_ELECTIVOS")),IM_NIVEL_ELECTIVORow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_CARGOS_ELECTIVOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_CARGO_SUPERIORNull() As Boolean
            Return Me.IsNull(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_SUPERIORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_CARGO_SUPERIORNull()
            Me(Me.tableIM_CARGOS_ELECTIVOS.CODIGO_CARGO_SUPERIORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_CARGOS_ELECTIVOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_CARGOS_ELECTIVOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_CARGOS_ELECTIVOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_CARGOS_ELECTIVOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CANDIDATOSRows() As IM_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK3_CANDIDATOS") Is Nothing) Then
                Return New IM_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK3_CANDIDATOS")),IM_CANDIDATOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CANDIDATOS_PUEDEN_REPETIRRows() As IM_CANDIDATOS_PUEDEN_REPETIRRow()
            If (Me.Table.ChildRelations("IM_FK2_CAND_PUEDEN_REPETIR") Is Nothing) Then
                Return New IM_CANDIDATOS_PUEDEN_REPETIRRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_CAND_PUEDEN_REPETIR")),IM_CANDIDATOS_PUEDEN_REPETIRRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTA_CANDIDATOSRows() As TA_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK3_CANDIDATOS1") Is Nothing) Then
                Return New TA_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK3_CANDIDATOS1")),TA_CANDIDATOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOSRows() As IM_REQUISITOSRow()
            If (Me.Table.ChildRelations("IM_FK1_REQUISITOS") Is Nothing) Then
                Return New IM_REQUISITOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_REQUISITOS")),IM_REQUISITOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOS1Rows() As IM_REQUISITOS1Row()
            If (Me.Table.ChildRelations("IM_FK1_REQUISITOS1") Is Nothing) Then
                Return New IM_REQUISITOS1Row(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_REQUISITOS1")),IM_REQUISITOS1Row())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_DEPARTAMENTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_DEPARTAMENTOS As IM_DEPARTAMENTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_DEPARTAMENTOS = CType(Me.Table,IM_DEPARTAMENTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DEPARTAMENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_DEPARTAMENTOS.CODIGO_DEPARTAMENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.CODIGO_DEPARTAMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_DEPARTAMENTOS.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD_DIPUTADOS() As Decimal
            Get
                Return CType(Me(Me.tableIM_DEPARTAMENTOS.CANTIDAD_DIPUTADOSColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.CANTIDAD_DIPUTADOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_DEPARTAMENTOS.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_DEPARTAMENTOS.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_DEPARTAMENTOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_DEPARTAMENTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_DEPARTAMENTOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_DEPARTAMENTOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_DEPARTAMENTOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_DEPARTAMENTOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_DEPARTAMENTOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_DEPARTAMENTOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_DEPARTAMENTOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_MUNICIPIOSRows() As IM_MUNICIPIOSRow()
            If (Me.Table.ChildRelations("IM_FK1_MUNICIPIO") Is Nothing) Then
                Return New IM_MUNICIPIOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_MUNICIPIO")),IM_MUNICIPIOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_MUNICIPIOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_MUNICIPIOS As IM_MUNICIPIOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_MUNICIPIOS = CType(Me.Table,IM_MUNICIPIOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MUNICIPIO() As Decimal
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.CODIGO_MUNICIPIOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.CODIGO_MUNICIPIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DEPARTAMENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.CODIGO_DEPARTAMENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.CODIGO_DEPARTAMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD_REGIDORES() As Decimal
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.CANTIDAD_REGIDORESColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.CANTIDAD_REGIDORESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_MUNICIPIOS.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_MUNICIPIOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_MUNICIPIOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_MUNICIPIOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_MUNICIPIOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_MUNICIPIOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_DEPARTAMENTOSRow() As IM_DEPARTAMENTOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_MUNICIPIO")),IM_DEPARTAMENTOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_MUNICIPIO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_MUNICIPIOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_MUNICIPIOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_MUNICIPIOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_MUNICIPIOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CANDIDATOSRows() As IM_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK2_CANDIDATOS") Is Nothing) Then
                Return New IM_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_CANDIDATOS")),IM_CANDIDATOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTA_CANDIDATOSRows() As TA_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK2_CANDIDATOS1") Is Nothing) Then
                Return New TA_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_CANDIDATOS1")),TA_CANDIDATOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_MOVIMIENTOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_MOVIMIENTOS As IM_MOVIMIENTOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_MOVIMIENTOS = CType(Me.Table,IM_MOVIMIENTOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MOVIMIENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_MOVIMIENTOS.CODIGO_MOVIMIENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_MOVIMIENTOS.CODIGO_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE_MOVIMIENTO() As String
            Get
                Return CType(Me(Me.tableIM_MOVIMIENTOS.NOMBRE_MOVIMIENTOColumn),String)
            End Get
            Set
                Me(Me.tableIM_MOVIMIENTOS.NOMBRE_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Return CType(Me(Me.tableIM_MOVIMIENTOS.CODIGO_PARTIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_MOVIMIENTOS.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PARTIDOS_POLITICOSRow() As IM_PARTIDOS_POLITICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_MOVIMIENTOS")),IM_PARTIDOS_POLITICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_MOVIMIENTOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CANDIDATOS_REPETIDOSRows() As IM_CANDIDATOS_REPETIDOSRow()
            If (Me.Table.ChildRelations("IM_FK2_CANDIDATOS_REPETIDOS") Is Nothing) Then
                Return New IM_CANDIDATOS_REPETIDOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_CANDIDATOS_REPETIDOS")),IM_CANDIDATOS_REPETIDOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOS_X_CANDIDATORows() As IM_REQUISITOS_X_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK3_REQUISITOS_X_CANDIDATO") Is Nothing) Then
                Return New IM_REQUISITOS_X_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK3_REQUISITOS_X_CANDIDATO")),IM_REQUISITOS_X_CANDIDATORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_IMAGENES_CANDIDATORow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_IMAGENES_CANDIDATO As IM_IMAGENES_CANDIDATODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_IMAGENES_CANDIDATO = CType(Me.Table,IM_IMAGENES_CANDIDATODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CANDIDATO() As Decimal
            Get
                Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.CODIGO_CANDIDATOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.CODIGO_CANDIDATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_REQUISITO() As Decimal
            Get
                Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.CODIGO_REQUISITOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.CODIGO_REQUISITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMAGEN() As Byte()
            Get
                Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.IMAGENColumn),Byte())
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.IMAGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_IMAGENES_CANDIDATO' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_IMAGENES_CANDIDATO.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_IMAGENES_CANDIDATO' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_IMAGENES_CANDIDATO.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CANDIDATOSRow() As IM_CANDIDATOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_IMAGENES_CANDIDATO")),IM_CANDIDATOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_IMAGENES_CANDIDATO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TA_CANDIDATOSRow() As TA_CANDIDATOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_IMAGENES_CANDIDATO1")),TA_CANDIDATOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_IMAGENES_CANDIDATO1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_REQUISITOSRow() As IM_REQUISITOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_IMAGENES_CANDIDATO")),IM_REQUISITOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_IMAGENES_CANDIDATO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_REQUISITOS1Row() As IM_REQUISITOS1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_IMAGENES_CANDIDATO1")),IM_REQUISITOS1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_IMAGENES_CANDIDATO1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_IMAGENES_CANDIDATO.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_IMAGENES_CANDIDATO.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_IMAGENES_CANDIDATO.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_IMAGENES_CANDIDATO.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_PARTIDOS_POLITICOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_PARTIDOS_POLITICOS As IM_PARTIDOS_POLITICOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_PARTIDOS_POLITICOS = CType(Me.Table,IM_PARTIDOS_POLITICOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Return CType(Me(Me.tableIM_PARTIDOS_POLITICOS.CODIGO_PARTIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_PARTIDOS_POLITICOS.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Return CType(Me(Me.tableIM_PARTIDOS_POLITICOS.NOMBREColumn),String)
            End Get
            Set
                Me(Me.tableIM_PARTIDOS_POLITICOS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CANDIDATOSRows() As IM_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK4_CANDIDATOS") Is Nothing) Then
                Return New IM_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK4_CANDIDATOS")),IM_CANDIDATOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_MOVIMIENTOSRows() As IM_MOVIMIENTOSRow()
            If (Me.Table.ChildRelations("IM_FK1_MOVIMIENTOS") Is Nothing) Then
                Return New IM_MOVIMIENTOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_MOVIMIENTOS")),IM_MOVIMIENTOSRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTA_CANDIDATOSRows() As TA_CANDIDATOSRow()
            If (Me.Table.ChildRelations("IM_FK4_CANDIDATOS1") Is Nothing) Then
                Return New TA_CANDIDATOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK4_CANDIDATOS1")),TA_CANDIDATOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_NIVEL_ELECTIVORow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_NIVEL_ELECTIVO As IM_NIVEL_ELECTIVODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_NIVEL_ELECTIVO = CType(Me.Table,IM_NIVEL_ELECTIVODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_NIVEL_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.CODIGO_NIVEL_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.CODIGO_NIVEL_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.ADICIONADO_PORColumn),String)
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.FECHA_ADICIONColumn),Date)
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_NIVEL_ELECTIVO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_NIVEL_ELECTIVO.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_NIVEL_ELECTIVO' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_NIVEL_ELECTIVO.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_NIVEL_ELECTIVO.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_NIVEL_ELECTIVO.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_NIVEL_ELECTIVO.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_NIVEL_ELECTIVO.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_CARGOS_ELECTIVOSRows() As IM_CARGOS_ELECTIVOSRow()
            If (Me.Table.ChildRelations("IM_FK1_CARGOS_ELECTIVOS") Is Nothing) Then
                Return New IM_CARGOS_ELECTIVOSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_CARGOS_ELECTIVOS")),IM_CARGOS_ELECTIVOSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TA_CANDIDATOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTA_CANDIDATOS As TA_CANDIDATOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTA_CANDIDATOS = CType(Me.Table,TA_CANDIDATOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MOVIMIENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_MOVIMIENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_MOVIMIENTO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_PARTIDOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_PARTIDO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CANDIDATOS() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_CANDIDATOSColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_CANDIDATOS' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_CANDIDATOSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.NOMBREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMBRE' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.NOMBREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POSICION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.POSICIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSICION' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.POSICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_CARGO_ELECTIVO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property APELLIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.APELLIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'APELLIDO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.APELLIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_DEPARTAMENTO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_DEPARTAMENTOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_DEPARTAMENTO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_DEPARTAMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MUNICIPIO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CODIGO_MUNICIPIOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CODIGO_MUNICIPIO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CODIGO_MUNICIPIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDENTIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.IDENTIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTIDAD' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.IDENTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.ADICIONADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADICIONADO_POR' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.FECHA_ADICIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_ADICION' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOMBRE_MOVIMIENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.NOMBRE_MOVIMIENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOMBRE_MOVIMIENTO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.NOMBRE_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARTIDO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.PARTIDOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARTIDO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARGO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.CARGOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CARGO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.CARGOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPARTAMENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.DEPARTAMENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPARTAMENTO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.DEPARTAMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUNICIPIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableTA_CANDIDATOS.MUNICIPIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MUNICIPIO' in table 'TA_CANDIDATOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTA_CANDIDATOS.MUNICIPIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_MUNICIPIOSRowParent() As IM_MUNICIPIOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK2_CANDIDATOS1")),IM_MUNICIPIOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK2_CANDIDATOS1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK3_CANDIDATOS1")),IM_CARGOS_ELECTIVOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK3_CANDIDATOS1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_PARTIDOS_POLITICOSRow() As IM_PARTIDOS_POLITICOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK4_CANDIDATOS1")),IM_PARTIDOS_POLITICOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK4_CANDIDATOS1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_MOVIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_MOVIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_MOVIMIENTONull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_MOVIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_PARTIDONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_PARTIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_PARTIDONull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_PARTIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_CANDIDATOSNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_CANDIDATOSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_CANDIDATOSNull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_CANDIDATOSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRENull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.NOMBREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRENull()
            Me(Me.tableTA_CANDIDATOS.NOMBREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOSICIONNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.POSICIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOSICIONNull()
            Me(Me.tableTA_CANDIDATOS.POSICIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_CARGO_ELECTIVONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_CARGO_ELECTIVONull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_CARGO_ELECTIVOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAPELLIDONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.APELLIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAPELLIDONull()
            Me(Me.tableTA_CANDIDATOS.APELLIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_DEPARTAMENTONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_DEPARTAMENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_DEPARTAMENTONull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_DEPARTAMENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODIGO_MUNICIPIONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CODIGO_MUNICIPIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODIGO_MUNICIPIONull()
            Me(Me.tableTA_CANDIDATOS.CODIGO_MUNICIPIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDENTIDADNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.IDENTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDENTIDADNull()
            Me(Me.tableTA_CANDIDATOS.IDENTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADICIONADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.ADICIONADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADICIONADO_PORNull()
            Me(Me.tableTA_CANDIDATOS.ADICIONADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_ADICIONNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.FECHA_ADICIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_ADICIONNull()
            Me(Me.tableTA_CANDIDATOS.FECHA_ADICIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableTA_CANDIDATOS.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableTA_CANDIDATOS.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMBRE_MOVIMIENTONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.NOMBRE_MOVIMIENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMBRE_MOVIMIENTONull()
            Me(Me.tableTA_CANDIDATOS.NOMBRE_MOVIMIENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPARTIDONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.PARTIDOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPARTIDONull()
            Me(Me.tableTA_CANDIDATOS.PARTIDOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARGONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.CARGOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARGONull()
            Me(Me.tableTA_CANDIDATOS.CARGOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPARTAMENTONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.DEPARTAMENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPARTAMENTONull()
            Me(Me.tableTA_CANDIDATOS.DEPARTAMENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUNICIPIONull() As Boolean
            Return Me.IsNull(Me.tableTA_CANDIDATOS.MUNICIPIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUNICIPIONull()
            Me(Me.tableTA_CANDIDATOS.MUNICIPIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_IMAGENES_CANDIDATORows() As IM_IMAGENES_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK1_IMAGENES_CANDIDATO1") Is Nothing) Then
                Return New IM_IMAGENES_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK1_IMAGENES_CANDIDATO1")),IM_IMAGENES_CANDIDATORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_REQUISITOS_X_CANDIDATORow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_REQUISITOS_X_CANDIDATO As IM_REQUISITOS_X_CANDIDATODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_REQUISITOS_X_CANDIDATO = CType(Me.Table,IM_REQUISITOS_X_CANDIDATODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CANDIDATO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_CANDIDATOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_CANDIDATOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_PARTIDO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_PARTIDOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_PARTIDOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_MOVIMIENTO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_MOVIMIENTOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_MOVIMIENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_REQUISITO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_REQUISITOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CODIGO_REQUISITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CANTIDAD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CANTIDADColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CANTIDAD' in table 'IM_REQUISITOS_X_CANDIDATO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CANTIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMAGEN() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.IMAGENColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMAGEN' in table 'IM_REQUISITOS_X_CANDIDATO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.IMAGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADICIONADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ADICIONADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADICIONADO_POR' in table 'IM_REQUISITOS_X_CANDIDATO' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ADICIONADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_ADICION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_ADICIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_ADICION' in table 'IM_REQUISITOS_X_CANDIDATO' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_ADICIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODIFICADO_POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.MODIFICADO_PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODIFICADO_POR' in table 'IM_REQUISITOS_X_CANDIDATO' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.MODIFICADO_PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA_MODIFICACION() As Date
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_MODIFICACIONColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FECHA_MODIFICACION' in table 'IM_REQUISITOS_X_CANDIDATO' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_MODIFICACIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTADO' in table 'IM_REQUISITOS_X_CANDIDATO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CANDIDATOSRow() As IM_CANDIDATOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_REQUISITOS_X_CANDIDATO")),IM_CANDIDATOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_REQUISITOS_X_CANDIDATO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_MOVIMIENTOSRowParent() As IM_MOVIMIENTOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK3_REQUISITOS_X_CANDIDATO")),IM_MOVIMIENTOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK3_REQUISITOS_X_CANDIDATO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_REQUISITOSRow() As IM_REQUISITOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK4_REQUISITOS_X_CANDIDATO")),IM_REQUISITOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK4_REQUISITOS_X_CANDIDATO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_REQUISITOS1Row() As IM_REQUISITOS1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK4_REQUISITOS_X_CANDIDATO1")),IM_REQUISITOS1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK4_REQUISITOS_X_CANDIDATO1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCANTIDADNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.CANTIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCANTIDADNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.CANTIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMAGENNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.IMAGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMAGENNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.IMAGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsADICIONADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.ADICIONADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetADICIONADO_PORNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ADICIONADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_ADICIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_ADICIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_ADICIONNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_ADICIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODIFICADO_PORNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.MODIFICADO_PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODIFICADO_PORNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.MODIFICADO_PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHA_MODIFICACIONNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_MODIFICACIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHA_MODIFICACIONNull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.FECHA_MODIFICACIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTADONull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS_X_CANDIDATO.ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTADONull()
            Me(Me.tableIM_REQUISITOS_X_CANDIDATO.ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_REQUISITOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableIM_REQUISITOS As IM_REQUISITOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_REQUISITOS = CType(Me.Table,IM_REQUISITOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_REQUISITOS.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_REQUISITO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS.CODIGO_REQUISITOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.CODIGO_REQUISITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS.CODIGO_CARGO_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUTOMATICO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS.AUTOMATICOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTOMATICO' in table 'IM_REQUISITOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.AUTOMATICOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS.ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTADO' in table 'IM_REQUISITOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMAGEN() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS.IMAGENColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMAGEN' in table 'IM_REQUISITOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.IMAGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cumplido() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS.CumplidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cumplido' in table 'IM_REQUISITOS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS.CumplidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_REQUISITOS")),IM_CARGOS_ELECTIVOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_REQUISITOS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUTOMATICONull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS.AUTOMATICOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUTOMATICONull()
            Me(Me.tableIM_REQUISITOS.AUTOMATICOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTADONull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS.ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTADONull()
            Me(Me.tableIM_REQUISITOS.ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMAGENNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS.IMAGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMAGENNull()
            Me(Me.tableIM_REQUISITOS.IMAGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCumplidoNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS.CumplidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCumplidoNull()
            Me(Me.tableIM_REQUISITOS.CumplidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOS_X_CANDIDATORows() As IM_REQUISITOS_X_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK4_REQUISITOS_X_CANDIDATO") Is Nothing) Then
                Return New IM_REQUISITOS_X_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK4_REQUISITOS_X_CANDIDATO")),IM_REQUISITOS_X_CANDIDATORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_IMAGENES_CANDIDATORows() As IM_IMAGENES_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK2_IMAGENES_CANDIDATO") Is Nothing) Then
                Return New IM_IMAGENES_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_IMAGENES_CANDIDATO")),IM_IMAGENES_CANDIDATORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IM_REQUISITOS1Row
        Inherits Global.System.Data.DataRow
        
        Private tableIM_REQUISITOS1 As IM_REQUISITOS1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIM_REQUISITOS1 = CType(Me.Table,IM_REQUISITOS1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCION() As String
            Get
                Return CType(Me(Me.tableIM_REQUISITOS1.DESCRIPCIONColumn),String)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.DESCRIPCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_REQUISITO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS1.CODIGO_REQUISITOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.CODIGO_REQUISITOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODIGO_CARGO_ELECTIVO() As Decimal
            Get
                Return CType(Me(Me.tableIM_REQUISITOS1.CODIGO_CARGO_ELECTIVOColumn),Decimal)
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.CODIGO_CARGO_ELECTIVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUTOMATICO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS1.AUTOMATICOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTOMATICO' in table 'IM_REQUISITOS1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.AUTOMATICOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTADO() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS1.ESTADOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTADO' in table 'IM_REQUISITOS1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.ESTADOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IMAGEN() As String
            Get
                Try 
                    Return CType(Me(Me.tableIM_REQUISITOS1.IMAGENColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IMAGEN' in table 'IM_REQUISITOS1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIM_REQUISITOS1.IMAGENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IM_CARGOS_ELECTIVOSRow() As IM_CARGOS_ELECTIVOSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("IM_FK1_REQUISITOS1")),IM_CARGOS_ELECTIVOSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("IM_FK1_REQUISITOS1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUTOMATICONull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS1.AUTOMATICOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUTOMATICONull()
            Me(Me.tableIM_REQUISITOS1.AUTOMATICOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTADONull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS1.ESTADOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTADONull()
            Me(Me.tableIM_REQUISITOS1.ESTADOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIMAGENNull() As Boolean
            Return Me.IsNull(Me.tableIM_REQUISITOS1.IMAGENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIMAGENNull()
            Me(Me.tableIM_REQUISITOS1.IMAGENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_IMAGENES_CANDIDATORows() As IM_IMAGENES_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK2_IMAGENES_CANDIDATO1") Is Nothing) Then
                Return New IM_IMAGENES_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK2_IMAGENES_CANDIDATO1")),IM_IMAGENES_CANDIDATORow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIM_REQUISITOS_X_CANDIDATORows() As IM_REQUISITOS_X_CANDIDATORow()
            If (Me.Table.ChildRelations("IM_FK4_REQUISITOS_X_CANDIDATO1") Is Nothing) Then
                Return New IM_REQUISITOS_X_CANDIDATORow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("IM_FK4_REQUISITOS_X_CANDIDATO1")),IM_REQUISITOS_X_CANDIDATORow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_CANDIDATOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_CANDIDATOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_CANDIDATOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_CANDIDATOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_CANDIDATOS_PUEDEN_REPETIRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_CANDIDATOS_PUEDEN_REPETIRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_CANDIDATOS_PUEDEN_REPETIRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_CANDIDATOS_PUEDEN_REPETIRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_CANDIDATOS_REPETIDOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_CANDIDATOS_REPETIDOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_CANDIDATOS_REPETIDOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_CANDIDATOS_REPETIDOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_CARGOS_ELECTIVOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_CARGOS_ELECTIVOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_CARGOS_ELECTIVOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_CARGOS_ELECTIVOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_DEPARTAMENTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_DEPARTAMENTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_DEPARTAMENTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_DEPARTAMENTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_MUNICIPIOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_MUNICIPIOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_MUNICIPIOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_MUNICIPIOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_MOVIMIENTOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_MOVIMIENTOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_MOVIMIENTOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_MOVIMIENTOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_IMAGENES_CANDIDATORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_IMAGENES_CANDIDATORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_IMAGENES_CANDIDATORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_IMAGENES_CANDIDATORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_PARTIDOS_POLITICOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_PARTIDOS_POLITICOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_PARTIDOS_POLITICOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_PARTIDOS_POLITICOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_NIVEL_ELECTIVORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_NIVEL_ELECTIVORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_NIVEL_ELECTIVORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_NIVEL_ELECTIVORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TA_CANDIDATOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TA_CANDIDATOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TA_CANDIDATOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TA_CANDIDATOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_REQUISITOS_X_CANDIDATORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_REQUISITOS_X_CANDIDATORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_REQUISITOS_X_CANDIDATORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_REQUISITOS_X_CANDIDATORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_REQUISITOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_REQUISITOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_REQUISITOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_REQUISITOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IM_REQUISITOS1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As IM_REQUISITOS1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IM_REQUISITOS1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IM_REQUISITOS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSInscripcionCandidatosTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_CANDIDATOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_CANDIDATOS"
            tableMapping.ColumnMappings.Add("CODIGO_CANDIDATOS", "CODIGO_CANDIDATOS")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("POSICION", "POSICION")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("CODIGO_DEPARTAMENTO", "CODIGO_DEPARTAMENTO")
            tableMapping.ColumnMappings.Add("CODIGO_MUNICIPIO", "CODIGO_MUNICIPIO")
            tableMapping.ColumnMappings.Add("CODIGO_MOVIMIENTO", "CODIGO_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("IDENTIDAD", "IDENTIDAD")
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_CANDIDATOS"" WHERE ((""CODIGO_CANDIDATOS"" = :Original_CODIGO_"& _ 
                "CANDIDATOS) AND (""NOMBRE"" = :Original_NOMBRE) AND ((:IsNull_POSICION = 1 AND ""PO"& _ 
                "SICION"" IS NULL) OR (""POSICION"" = :Original_POSICION)) AND (""CODIGO_CARGO_ELECTI"& _ 
                "VO"" = :Original_CODIGO_CARGO_ELECTIVO) AND (""APELLIDO"" = :Original_APELLIDO) AND"& _ 
                " (""CODIGO_DEPARTAMENTO"" = :Original_CODIGO_DEPARTAMENTO) AND (""CODIGO_MUNICIPIO"""& _ 
                " = :Original_CODIGO_MUNICIPIO) AND (""CODIGO_MOVIMIENTO"" = :Original_CODIGO_MOVIM"& _ 
                "IENTO) AND (""IDENTIDAD"" = :Original_IDENTIDAD) AND (""CODIGO_PARTIDO"" = :Original"& _ 
                "_CODIGO_PARTIDO) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_A"& _ 
                "DICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFIC"& _ 
                "ADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNul"& _ 
                "l_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACI"& _ 
                "ON"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATOS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_POSICION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_POSICION", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_APELLIDO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "APELLIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_CANDIDATOS"" (""CODIGO_CANDIDATOS"", ""NOMBRE"", ""POSICION"", ""CO"& _ 
                "DIGO_CARGO_ELECTIVO"", ""APELLIDO"", ""CODIGO_DEPARTAMENTO"", ""CODIGO_MUNICIPIO"", ""CO"& _ 
                "DIGO_MOVIMIENTO"", ""IDENTIDAD"", ""CODIGO_PARTIDO"", ""ADICIONADO_POR"", ""FECHA_ADICIO"& _ 
                "N"", ""MODIFICADO_POR"", ""FECHA_MODIFICACION"") VALUES (:CODIGO_CANDIDATOS, :NOMBRE,"& _ 
                " :POSICION, :CODIGO_CARGO_ELECTIVO, :APELLIDO, :CODIGO_DEPARTAMENTO, :CODIGO_MUN"& _ 
                "ICIPIO, :CODIGO_MOVIMIENTO, :IDENTIDAD, :CODIGO_PARTIDO, :ADICIONADO_POR, :FECHA"& _ 
                "_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATOS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("POSICION", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("APELLIDO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "APELLIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_CANDIDATOS"" SET ""CODIGO_CANDIDATOS"" = :CODIGO_CANDIDATOS, ""NOMBR"& _ 
                "E"" = :NOMBRE, ""POSICION"" = :POSICION, ""CODIGO_CARGO_ELECTIVO"" = :CODIGO_CARGO_EL"& _ 
                "ECTIVO, ""APELLIDO"" = :APELLIDO, ""CODIGO_DEPARTAMENTO"" = :CODIGO_DEPARTAMENTO, ""C"& _ 
                "ODIGO_MUNICIPIO"" = :CODIGO_MUNICIPIO, ""CODIGO_MOVIMIENTO"" = :CODIGO_MOVIMIENTO, "& _ 
                """IDENTIDAD"" = :IDENTIDAD, ""CODIGO_PARTIDO"" = :CODIGO_PARTIDO, ""ADICIONADO_POR"" ="& _ 
                " :ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODIFICA"& _ 
                "DO_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""CODIGO_CANDIDATOS"" ="& _ 
                " :Original_CODIGO_CANDIDATOS) AND (""NOMBRE"" = :Original_NOMBRE) AND ((:IsNull_PO"& _ 
                "SICION = 1 AND ""POSICION"" IS NULL) OR (""POSICION"" = :Original_POSICION)) AND (""C"& _ 
                "ODIGO_CARGO_ELECTIVO"" = :Original_CODIGO_CARGO_ELECTIVO) AND (""APELLIDO"" = :Orig"& _ 
                "inal_APELLIDO) AND (""CODIGO_DEPARTAMENTO"" = :Original_CODIGO_DEPARTAMENTO) AND ("& _ 
                """CODIGO_MUNICIPIO"" = :Original_CODIGO_MUNICIPIO) AND (""CODIGO_MOVIMIENTO"" = :Ori"& _ 
                "ginal_CODIGO_MOVIMIENTO) AND (""IDENTIDAD"" = :Original_IDENTIDAD) AND (""CODIGO_PA"& _ 
                "RTIDO"" = :Original_CODIGO_PARTIDO) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_"& _ 
                "POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_PO"& _ 
                "R = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_"& _ 
                "POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR "& _ 
                "(""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATOS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("POSICION", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("APELLIDO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "APELLIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATOS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_POSICION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_POSICION", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "POSICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_APELLIDO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "APELLIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_CANDIDATOS, NOMBRE, POSICION, CODIGO_CARGO_ELECTIVO, APELLIDO, CODI"& _ 
                "GO_DEPARTAMENTO, CODIGO_MUNICIPIO, CODIGO_MOVIMIENTO, IDENTIDAD, CODIGO_PARTIDO,"& _ 
                " ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_C"& _ 
                "ANDIDATOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_CANDIDATOSDataTable = New DSInscripcionCandidatos.IM_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_CANDIDATOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_CANDIDATOS As Decimal, ByVal Original_NOMBRE As String, ByVal Original_POSICION As Global.System.Nullable(Of Decimal), ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal, ByVal Original_APELLIDO As String, ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_CODIGO_MUNICIPIO As Decimal, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_IDENTIDAD As String, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_CANDIDATOS,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_POSICION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_POSICION.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CODIGO_CARGO_ELECTIVO,Decimal)
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_IDENTIDAD,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_CANDIDATOS As Decimal, ByVal NOMBRE As String, ByVal POSICION As Global.System.Nullable(Of Decimal), ByVal CODIGO_CARGO_ELECTIVO As Decimal, ByVal APELLIDO As String, ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal CODIGO_MUNICIPIO As Decimal, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal IDENTIDAD As String, ByVal CODIGO_PARTIDO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_CANDIDATOS,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (POSICION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(POSICION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CODIGO_CARGO_ELECTIVO,Decimal)
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IDENTIDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(CODIGO_PARTIDO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_CANDIDATOS As Decimal,  _
                    ByVal NOMBRE As String,  _
                    ByVal POSICION As Global.System.Nullable(Of Decimal),  _
                    ByVal CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal APELLIDO As String,  _
                    ByVal CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal CODIGO_MUNICIPIO As Decimal,  _
                    ByVal CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal IDENTIDAD As String,  _
                    ByVal CODIGO_PARTIDO As Decimal,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Date,  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_CODIGO_CANDIDATOS As Decimal,  _
                    ByVal Original_NOMBRE As String,  _
                    ByVal Original_POSICION As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal Original_APELLIDO As String,  _
                    ByVal Original_CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal Original_CODIGO_MUNICIPIO As Decimal,  _
                    ByVal Original_CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal Original_IDENTIDAD As String,  _
                    ByVal Original_CODIGO_PARTIDO As Decimal,  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Date,  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_CANDIDATOS,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            If (POSICION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(POSICION.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CODIGO_CARGO_ELECTIVO,Decimal)
            If (APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IDENTIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CODIGO_PARTIDO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CODIGO_CANDIDATOS,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_NOMBRE,String)
            End If
            If (Original_POSICION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_POSICION.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CODIGO_CARGO_ELECTIVO,Decimal)
            If (Original_APELLIDO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_APELLIDO")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_APELLIDO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_IDENTIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal NOMBRE As String,  _
                    ByVal POSICION As Global.System.Nullable(Of Decimal),  _
                    ByVal CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal APELLIDO As String,  _
                    ByVal CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal CODIGO_MUNICIPIO As Decimal,  _
                    ByVal CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal IDENTIDAD As String,  _
                    ByVal CODIGO_PARTIDO As Decimal,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Date,  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_CODIGO_CANDIDATOS As Decimal,  _
                    ByVal Original_NOMBRE As String,  _
                    ByVal Original_POSICION As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal Original_APELLIDO As String,  _
                    ByVal Original_CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal Original_CODIGO_MUNICIPIO As Decimal,  _
                    ByVal Original_CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal Original_IDENTIDAD As String,  _
                    ByVal Original_CODIGO_PARTIDO As Decimal,  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Date,  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_CANDIDATOS, NOMBRE, POSICION, CODIGO_CARGO_ELECTIVO, APELLIDO, CODIGO_DEPARTAMENTO, CODIGO_MUNICIPIO, CODIGO_MOVIMIENTO, IDENTIDAD, CODIGO_PARTIDO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_CANDIDATOS, Original_NOMBRE, Original_POSICION, Original_CODIGO_CARGO_ELECTIVO, Original_APELLIDO, Original_CODIGO_DEPARTAMENTO, Original_CODIGO_MUNICIPIO, Original_CODIGO_MOVIMIENTO, Original_IDENTIDAD, Original_CODIGO_PARTIDO, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_CANDIDATOS_PUEDEN_REPETIRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_CANDIDATOS_PUEDEN_REPETIR"
            tableMapping.ColumnMappings.Add("IDENTIDAD", "IDENTIDAD")
            tableMapping.ColumnMappings.Add("YA_INGRESADO", "YA_INGRESADO")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_CANDIDATOS_PUEDEN_REPETIR"" WHERE ((""IDENTIDAD"" = :Original_"& _ 
                "IDENTIDAD) AND ((:IsNull_YA_INGRESADO = 1 AND ""YA_INGRESADO"" IS NULL) OR (""YA_IN"& _ 
                "GRESADO"" = :Original_YA_INGRESADO)) AND ((:IsNull_CODIGO_CARGO_ELECTIVO = 1 AND "& _ 
                """CODIGO_CARGO_ELECTIVO"" IS NULL) OR (""CODIGO_CARGO_ELECTIVO"" = :Original_CODIGO_"& _ 
                "CARGO_ELECTIVO)) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_A"& _ 
                "DICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFIC"& _ 
                "ADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNul"& _ 
                "l_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACI"& _ 
                "ON"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_YA_INGRESADO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_YA_INGRESADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_CANDIDATOS_PUEDEN_REPETIR"" (""IDENTIDAD"", ""YA_INGRESADO"", ""C"& _ 
                "ODIGO_CARGO_ELECTIVO"", ""ADICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO_POR"", ""FEC"& _ 
                "HA_MODIFICACION"") VALUES (:IDENTIDAD, :YA_INGRESADO, :CODIGO_CARGO_ELECTIVO, :AD"& _ 
                "ICIONADO_POR, :FECHA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("YA_INGRESADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_CANDIDATOS_PUEDEN_REPETIR"" SET ""IDENTIDAD"" = :IDENTIDAD, ""YA_ING"& _ 
                "RESADO"" = :YA_INGRESADO, ""CODIGO_CARGO_ELECTIVO"" = :CODIGO_CARGO_ELECTIVO, ""ADIC"& _ 
                "IONADO_POR"" = :ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"& _ 
                """ = :MODIFICADO_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""IDENTID"& _ 
                "AD"" = :Original_IDENTIDAD) AND ((:IsNull_YA_INGRESADO = 1 AND ""YA_INGRESADO"" IS "& _ 
                "NULL) OR (""YA_INGRESADO"" = :Original_YA_INGRESADO)) AND ((:IsNull_CODIGO_CARGO_E"& _ 
                "LECTIVO = 1 AND ""CODIGO_CARGO_ELECTIVO"" IS NULL) OR (""CODIGO_CARGO_ELECTIVO"" = :"& _ 
                "Original_CODIGO_CARGO_ELECTIVO)) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_PO"& _ 
                "R) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR "& _ 
                "= 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_PO"& _ 
                "R)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR ("""& _ 
                "FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("YA_INGRESADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_YA_INGRESADO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_YA_INGRESADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "YA_INGRESADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDENTIDAD, YA_INGRESADO, CODIGO_CARGO_ELECTIVO, ADICIONADO_POR, FECHA_ADIC"& _ 
                "ION, MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_CANDIDATOS_PUEDEN_REPETIR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_PUEDEN_REPETIRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_CANDIDATOS_PUEDEN_REPETIRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_PUEDEN_REPETIRDataTable = New DSInscripcionCandidatos.IM_CANDIDATOS_PUEDEN_REPETIRDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_PUEDEN_REPETIRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_CANDIDATOS_PUEDEN_REPETIR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDENTIDAD As String, ByVal Original_YA_INGRESADO As String, ByVal Original_CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDENTIDAD,String)
            End If
            If (Original_YA_INGRESADO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_YA_INGRESADO,String)
            End If
            If (Original_CODIGO_CARGO_ELECTIVO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CODIGO_CARGO_ELECTIVO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDENTIDAD As String, ByVal YA_INGRESADO As String, ByVal CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDENTIDAD,String)
            End If
            If (YA_INGRESADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(YA_INGRESADO,String)
            End If
            If (CODIGO_CARGO_ELECTIVO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO_CARGO_ELECTIVO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDENTIDAD As String, ByVal YA_INGRESADO As String, ByVal CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_IDENTIDAD As String, ByVal Original_YA_INGRESADO As String, ByVal Original_CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDENTIDAD,String)
            End If
            If (YA_INGRESADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(YA_INGRESADO,String)
            End If
            If (CODIGO_CARGO_ELECTIVO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_CARGO_ELECTIVO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDENTIDAD,String)
            End If
            If (Original_YA_INGRESADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_YA_INGRESADO,String)
            End If
            If (Original_CODIGO_CARGO_ELECTIVO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CODIGO_CARGO_ELECTIVO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal YA_INGRESADO As String, ByVal CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_IDENTIDAD As String, ByVal Original_YA_INGRESADO As String, ByVal Original_CODIGO_CARGO_ELECTIVO As Global.System.Nullable(Of Decimal), ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IDENTIDAD, YA_INGRESADO, CODIGO_CARGO_ELECTIVO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_IDENTIDAD, Original_YA_INGRESADO, Original_CODIGO_CARGO_ELECTIVO, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_CANDIDATOS_REPETIDOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_CANDIDATOS_REPETIDOS"
            tableMapping.ColumnMappings.Add("IDENTIDAD", "IDENTIDAD")
            tableMapping.ColumnMappings.Add("CODIGO_MOVIMIENTO", "CODIGO_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_CANDIDATOS_REPETIDOS"" WHERE ((""IDENTIDAD"" = :Original_IDENT"& _ 
                "IDAD) AND (""CODIGO_MOVIMIENTO"" = :Original_CODIGO_MOVIMIENTO) AND (""CODIGO_PARTI"& _ 
                "DO"" = :Original_CODIGO_PARTIDO) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR"& _ 
                ") AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR ="& _ 
                " 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR"& _ 
                ")) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""F"& _ 
                "ECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_CANDIDATOS_REPETIDOS"" (""IDENTIDAD"", ""CODIGO_MOVIMIENTO"", ""C"& _ 
                "ODIGO_PARTIDO"", ""ADICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO_POR"", ""FECHA_MODI"& _ 
                "FICACION"") VALUES (:IDENTIDAD, :CODIGO_MOVIMIENTO, :CODIGO_PARTIDO, :ADICIONADO_"& _ 
                "POR, :FECHA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_CANDIDATOS_REPETIDOS"" SET ""IDENTIDAD"" = :IDENTIDAD, ""CODIGO_MOVI"& _ 
                "MIENTO"" = :CODIGO_MOVIMIENTO, ""CODIGO_PARTIDO"" = :CODIGO_PARTIDO, ""ADICIONADO_PO"& _ 
                "R"" = :ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODI"& _ 
                "FICADO_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""IDENTIDAD"" = :Or"& _ 
                "iginal_IDENTIDAD) AND (""CODIGO_MOVIMIENTO"" = :Original_CODIGO_MOVIMIENTO) AND ("""& _ 
                "CODIGO_PARTIDO"" = :Original_CODIGO_PARTIDO) AND (""ADICIONADO_POR"" = :Original_AD"& _ 
                "ICIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODI"& _ 
                "FICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MO"& _ 
                "DIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS "& _ 
                "NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_IDENTIDAD", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "IDENTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IDENTIDAD, CODIGO_MOVIMIENTO, CODIGO_PARTIDO, ADICIONADO_POR, FECHA_ADICIO"& _ 
                "N, MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_CANDIDATOS_REPETIDOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_REPETIDOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_CANDIDATOS_REPETIDOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_REPETIDOSDataTable = New DSInscripcionCandidatos.IM_CANDIDATOS_REPETIDOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_CANDIDATOS_REPETIDOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_CANDIDATOS_REPETIDOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IDENTIDAD As String, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IDENTIDAD,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IDENTIDAD As String, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_PARTIDO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IDENTIDAD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO_PARTIDO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IDENTIDAD As String, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_PARTIDO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_IDENTIDAD As String, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            If (IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IDENTIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_PARTIDO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_IDENTIDAD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_IDENTIDAD")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_IDENTIDAD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_IDENTIDAD As String, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_IDENTIDAD, Original_CODIGO_MOVIMIENTO, Original_CODIGO_PARTIDO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_IDENTIDAD, Original_CODIGO_MOVIMIENTO, Original_CODIGO_PARTIDO, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_CARGOS_ELECTIVOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_CARGOS_ELECTIVOS"
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_SUPERIOR", "CODIGO_CARGO_SUPERIOR")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("CODIGO_NIVEL_ELECTIVO", "CODIGO_NIVEL_ELECTIVO")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_CARGOS_ELECTIVOS"" WHERE ((""CODIGO_CARGO_ELECTIVO"" = :Origin"& _ 
                "al_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_CODIGO_CARGO_SUPERIOR = 1 AND ""CODIGO_CA"& _ 
                "RGO_SUPERIOR"" IS NULL) OR (""CODIGO_CARGO_SUPERIOR"" = :Original_CODIGO_CARGO_SUPE"& _ 
                "RIOR)) AND (""DESCRIPCION"" = :Original_DESCRIPCION) AND (""CODIGO_NIVEL_ELECTIVO"" "& _ 
                "= :Original_CODIGO_NIVEL_ELECTIVO) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_"& _ 
                "POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_PO"& _ 
                "R = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_"& _ 
                "POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR "& _ 
                "(""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_CARGOS_ELECTIVOS"" (""CODIGO_CARGO_ELECTIVO"", ""CODIGO_CARGO_S"& _ 
                "UPERIOR"", ""DESCRIPCION"", ""CODIGO_NIVEL_ELECTIVO"", ""ADICIONADO_POR"", ""FECHA_ADICI"& _ 
                "ON"", ""MODIFICADO_POR"", ""FECHA_MODIFICACION"") VALUES (:CODIGO_CARGO_ELECTIVO, :CO"& _ 
                "DIGO_CARGO_SUPERIOR, :DESCRIPCION, :CODIGO_NIVEL_ELECTIVO, :ADICIONADO_POR, :FEC"& _ 
                "HA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_CARGOS_ELECTIVOS"" SET ""CODIGO_CARGO_ELECTIVO"" = :CODIGO_CARGO_EL"& _ 
                "ECTIVO, ""CODIGO_CARGO_SUPERIOR"" = :CODIGO_CARGO_SUPERIOR, ""DESCRIPCION"" = :DESCR"& _ 
                "IPCION, ""CODIGO_NIVEL_ELECTIVO"" = :CODIGO_NIVEL_ELECTIVO, ""ADICIONADO_POR"" = :AD"& _ 
                "ICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODIFICADO_P"& _ 
                "OR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""CODIGO_CARGO_ELECTIVO"" ="& _ 
                " :Original_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_CODIGO_CARGO_SUPERIOR = 1 AND ""C"& _ 
                "ODIGO_CARGO_SUPERIOR"" IS NULL) OR (""CODIGO_CARGO_SUPERIOR"" = :Original_CODIGO_CA"& _ 
                "RGO_SUPERIOR)) AND (""DESCRIPCION"" = :Original_DESCRIPCION) AND (""CODIGO_NIVEL_EL"& _ 
                "ECTIVO"" = :Original_CODIGO_NIVEL_ELECTIVO) AND (""ADICIONADO_POR"" = :Original_ADI"& _ 
                "CIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIF"& _ 
                "ICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MOD"& _ 
                "IFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS N"& _ 
                "ULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_SUPERIOR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_SUPERIOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_CARGO_ELECTIVO, CODIGO_CARGO_SUPERIOR, DESCRIPCION, CODIGO_NIVEL_EL"& _ 
                "ECTIVO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION FROM T"& _ 
                "SE.IM_CARGOS_ELECTIVOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CODIGO_CARGO_ELECTIVO, CODIGO_CARGO_SUPERIOR, DESCRIPCION, CODIGO_N"& _ 
                "IVEL_ELECTIVO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CARGOS_ELECTIVOS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        ("& _ 
                "CODIGO_NIVEL_ELECTIVO = :id_nivel_electivo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_nivel_electivo", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable = New DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable, ByVal id_nivel_electivo As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_nivel_electivo,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal id_nivel_electivo As Decimal) As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_nivel_electivo,Decimal)
            Dim dataTable As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable = New DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_CARGOS_ELECTIVOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_CARGOS_ELECTIVOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal, ByVal Original_CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal), ByVal Original_DESCRIPCION As String, ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_CARGO_ELECTIVO,Decimal)
            If (Original_CODIGO_CARGO_SUPERIOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODIGO_CARGO_SUPERIOR.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DESCRIPCION,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CODIGO_NIVEL_ELECTIVO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_CARGO_ELECTIVO As Decimal, ByVal CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal), ByVal DESCRIPCION As String, ByVal CODIGO_NIVEL_ELECTIVO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_CARGO_ELECTIVO,Decimal)
            If (CODIGO_CARGO_SUPERIOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_CARGO_SUPERIOR.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CODIGO_NIVEL_ELECTIVO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal),  _
                    ByVal DESCRIPCION As String,  _
                    ByVal CODIGO_NIVEL_ELECTIVO As Decimal,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Date,  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal,  _
                    ByVal Original_CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DESCRIPCION As String,  _
                    ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal,  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Date,  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_CARGO_ELECTIVO,Decimal)
            If (CODIGO_CARGO_SUPERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_CARGO_SUPERIOR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CODIGO_NIVEL_ELECTIVO,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CODIGO_CARGO_ELECTIVO,Decimal)
            If (Original_CODIGO_CARGO_SUPERIOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CODIGO_CARGO_SUPERIOR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CODIGO_NIVEL_ELECTIVO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal), ByVal DESCRIPCION As String, ByVal CODIGO_NIVEL_ELECTIVO As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_CARGO_ELECTIVO As Decimal, ByVal Original_CODIGO_CARGO_SUPERIOR As Global.System.Nullable(Of Decimal), ByVal Original_DESCRIPCION As String, ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_CARGO_ELECTIVO, CODIGO_CARGO_SUPERIOR, DESCRIPCION, CODIGO_NIVEL_ELECTIVO, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_CARGO_ELECTIVO, Original_CODIGO_CARGO_SUPERIOR, Original_DESCRIPCION, Original_CODIGO_NIVEL_ELECTIVO, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_DEPARTAMENTOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_DEPARTAMENTOS"
            tableMapping.ColumnMappings.Add("CODIGO_DEPARTAMENTO", "CODIGO_DEPARTAMENTO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("CANTIDAD_DIPUTADOS", "CANTIDAD_DIPUTADOS")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_DEPARTAMENTOS"" WHERE ((""CODIGO_DEPARTAMENTO"" = :Original_CO"& _ 
                "DIGO_DEPARTAMENTO) AND (""DESCRIPCION"" = :Original_DESCRIPCION) AND (""CANTIDAD_DI"& _ 
                "PUTADOS"" = :Original_CANTIDAD_DIPUTADOS) AND (""ADICIONADO_POR"" = :Original_ADICI"& _ 
                "ONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFIC"& _ 
                "ADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIF"& _ 
                "ICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NUL"& _ 
                "L) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD_DIPUTADOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_DIPUTADOS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_DEPARTAMENTOS"" (""CODIGO_DEPARTAMENTO"", ""DESCRIPCION"", ""CANT"& _ 
                "IDAD_DIPUTADOS"", ""ADICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO_POR"", ""FECHA_MOD"& _ 
                "IFICACION"") VALUES (:CODIGO_DEPARTAMENTO, :DESCRIPCION, :CANTIDAD_DIPUTADOS, :AD"& _ 
                "ICIONADO_POR, :FECHA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD_DIPUTADOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_DIPUTADOS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_DEPARTAMENTOS"" SET ""CODIGO_DEPARTAMENTO"" = :CODIGO_DEPARTAMENTO,"& _ 
                " ""DESCRIPCION"" = :DESCRIPCION, ""CANTIDAD_DIPUTADOS"" = :CANTIDAD_DIPUTADOS, ""ADIC"& _ 
                "IONADO_POR"" = :ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"& _ 
                """ = :MODIFICADO_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""CODIGO_"& _ 
                "DEPARTAMENTO"" = :Original_CODIGO_DEPARTAMENTO) AND (""DESCRIPCION"" = :Original_DE"& _ 
                "SCRIPCION) AND (""CANTIDAD_DIPUTADOS"" = :Original_CANTIDAD_DIPUTADOS) AND (""ADICI"& _ 
                "ONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_AD"& _ 
                "ICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIF"& _ 
                "ICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND"& _ 
                " ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFI"& _ 
                "CACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD_DIPUTADOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_DIPUTADOS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD_DIPUTADOS", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_DIPUTADOS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_DEPARTAMENTO, DESCRIPCION, CANTIDAD_DIPUTADOS, ADICIONADO_POR, FECH"& _ 
                "A_ADICION, MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_DEPARTAMENTOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_DEPARTAMENTOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_DEPARTAMENTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_DEPARTAMENTOSDataTable = New DSInscripcionCandidatos.IM_DEPARTAMENTOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_DEPARTAMENTOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_DEPARTAMENTOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_CANTIDAD_DIPUTADOS As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESCRIPCION,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CANTIDAD_DIPUTADOS,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal DESCRIPCION As String, ByVal CANTIDAD_DIPUTADOS As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CANTIDAD_DIPUTADOS,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal DESCRIPCION As String, ByVal CANTIDAD_DIPUTADOS As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_CANTIDAD_DIPUTADOS As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CANTIDAD_DIPUTADOS,Decimal)
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DESCRIPCION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CANTIDAD_DIPUTADOS,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCRIPCION As String, ByVal CANTIDAD_DIPUTADOS As Decimal, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_CANTIDAD_DIPUTADOS As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_DEPARTAMENTO, DESCRIPCION, CANTIDAD_DIPUTADOS, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_DEPARTAMENTO, Original_DESCRIPCION, Original_CANTIDAD_DIPUTADOS, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_MUNICIPIOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_MUNICIPIOS"
            tableMapping.ColumnMappings.Add("CODIGO_MUNICIPIO", "CODIGO_MUNICIPIO")
            tableMapping.ColumnMappings.Add("CODIGO_DEPARTAMENTO", "CODIGO_DEPARTAMENTO")
            tableMapping.ColumnMappings.Add("CANTIDAD_REGIDORES", "CANTIDAD_REGIDORES")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_MUNICIPIOS"" WHERE ((""CODIGO_MUNICIPIO"" = :Original_CODIGO_M"& _ 
                "UNICIPIO) AND (""CODIGO_DEPARTAMENTO"" = :Original_CODIGO_DEPARTAMENTO) AND (""CANT"& _ 
                "IDAD_REGIDORES"" = :Original_CANTIDAD_REGIDORES) AND (""DESCRIPCION"" = :Original_D"& _ 
                "ESCRIPCION) AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICIO"& _ 
                "N"" = :Original_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_P"& _ 
                "OR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FEC"& _ 
                "HA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" ="& _ 
                " :Original_FECHA_MODIFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD_REGIDORES", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_REGIDORES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_MUNICIPIOS"" (""CODIGO_MUNICIPIO"", ""CODIGO_DEPARTAMENTO"", ""CA"& _ 
                "NTIDAD_REGIDORES"", ""DESCRIPCION"", ""ADICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO"& _ 
                "_POR"", ""FECHA_MODIFICACION"") VALUES (:CODIGO_MUNICIPIO, :CODIGO_DEPARTAMENTO, :C"& _ 
                "ANTIDAD_REGIDORES, :DESCRIPCION, :ADICIONADO_POR, :FECHA_ADICION, :MODIFICADO_PO"& _ 
                "R, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD_REGIDORES", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_REGIDORES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_MUNICIPIOS"" SET ""CODIGO_MUNICIPIO"" = :CODIGO_MUNICIPIO, ""CODIGO_"& _ 
                "DEPARTAMENTO"" = :CODIGO_DEPARTAMENTO, ""CANTIDAD_REGIDORES"" = :CANTIDAD_REGIDORES"& _ 
                ", ""DESCRIPCION"" = :DESCRIPCION, ""ADICIONADO_POR"" = :ADICIONADO_POR, ""FECHA_ADICI"& _ 
                "ON"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODIFICADO_POR, ""FECHA_MODIFICACION"" ="& _ 
                " :FECHA_MODIFICACION WHERE ((""CODIGO_MUNICIPIO"" = :Original_CODIGO_MUNICIPIO) AN"& _ 
                "D (""CODIGO_DEPARTAMENTO"" = :Original_CODIGO_DEPARTAMENTO) AND (""CANTIDAD_REGIDOR"& _ 
                "ES"" = :Original_CANTIDAD_REGIDORES) AND (""DESCRIPCION"" = :Original_DESCRIPCION) "& _ 
                "AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Origin"& _ 
                "al_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL)"& _ 
                " OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICAC"& _ 
                "ION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_F"& _ 
                "ECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD_REGIDORES", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_REGIDORES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MUNICIPIO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_DEPARTAMENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD_REGIDORES", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD_REGIDORES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_MUNICIPIO, CODIGO_DEPARTAMENTO, CANTIDAD_REGIDORES, DESCRIPCION, AD"& _ 
                "ICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_MUNI"& _ 
                "CIPIOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CODIGO_MUNICIPIO, CODIGO_DEPARTAMENTO, CANTIDAD_REGIDORES, DESCRIPC"& _ 
                "ION, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         F"& _ 
                "ECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_MUNICIPIOS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODIGO_DEPARTAME"& _ 
                "NTO = :id_depto)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_depto", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_DEPARTAMENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable = New DSInscripcionCandidatos.IM_MUNICIPIOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable, ByVal id_depto As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_depto,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal id_depto As Decimal) As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_depto,Decimal)
            Dim dataTable As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable = New DSInscripcionCandidatos.IM_MUNICIPIOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_MUNICIPIOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_MUNICIPIOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_MUNICIPIO As Decimal, ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_CANTIDAD_REGIDORES As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CANTIDAD_REGIDORES,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DESCRIPCION,String)
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_MUNICIPIO As Decimal, ByVal CODIGO_DEPARTAMENTO As Decimal, ByVal CANTIDAD_REGIDORES As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CANTIDAD_REGIDORES,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_MUNICIPIO As Decimal,  _
                    ByVal CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal CANTIDAD_REGIDORES As Decimal,  _
                    ByVal DESCRIPCION As String,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Date,  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_CODIGO_MUNICIPIO As Decimal,  _
                    ByVal Original_CODIGO_DEPARTAMENTO As Decimal,  _
                    ByVal Original_CANTIDAD_REGIDORES As Decimal,  _
                    ByVal Original_DESCRIPCION As String,  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Date,  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CANTIDAD_REGIDORES,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCRIPCION,String)
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CODIGO_MUNICIPIO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CODIGO_DEPARTAMENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CANTIDAD_REGIDORES,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DESCRIPCION,String)
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CANTIDAD_REGIDORES As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_MUNICIPIO As Decimal, ByVal Original_CODIGO_DEPARTAMENTO As Decimal, ByVal Original_CANTIDAD_REGIDORES As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_MUNICIPIO, Original_CODIGO_DEPARTAMENTO, CANTIDAD_REGIDORES, DESCRIPCION, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_MUNICIPIO, Original_CODIGO_DEPARTAMENTO, Original_CANTIDAD_REGIDORES, Original_DESCRIPCION, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_MOVIMIENTOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_MOVIMIENTOS"
            tableMapping.ColumnMappings.Add("CODIGO_MOVIMIENTO", "CODIGO_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("NOMBRE_MOVIMIENTO", "NOMBRE_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_MOVIMIENTOS"" WHERE ((""CODIGO_MOVIMIENTO"" = :Original_CODIGO"& _ 
                "_MOVIMIENTO) AND (""NOMBRE_MOVIMIENTO"" = :Original_NOMBRE_MOVIMIENTO) AND (""CODIG"& _ 
                "O_PARTIDO"" = :Original_CODIGO_PARTIDO))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_MOVIMIENTOS"" SET ""CODIGO_MOVIMIENTO"" = :CODIGO_MOVIMIENTO, ""NOMB"& _ 
                "RE_MOVIMIENTO"" = :NOMBRE_MOVIMIENTO, ""CODIGO_PARTIDO"" = :CODIGO_PARTIDO WHERE (("& _ 
                """CODIGO_MOVIMIENTO"" = :Original_CODIGO_MOVIMIENTO) AND (""NOMBRE_MOVIMIENTO"" = :O"& _ 
                "riginal_NOMBRE_MOVIMIENTO) AND (""CODIGO_PARTIDO"" = :Original_CODIGO_PARTIDO))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NOMBRE_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_MOVIMIENTO, NOMBRE_MOVIMIENTO, CODIGO_PARTIDO FROM TSE.IM_MOVIMIENT"& _ 
                "OS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CODIGO_MOVIMIENTO, CODIGO_PARTIDO, NOMBRE_MOVIMIENTO FROM IM_MOVIMIENTOS W"& _ 
                "HERE (CODIGO_PARTIDO = :id_partido)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable = New DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable, ByVal id_partido As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal id_partido As Decimal) As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Dim dataTable As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable = New DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_MOVIMIENTOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_MOVIMIENTOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_NOMBRE_MOVIMIENTO As String, ByVal Original_CODIGO_PARTIDO As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            If (Original_NOMBRE_MOVIMIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE_MOVIMIENTO")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE_MOVIMIENTO,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_MOVIMIENTO As Decimal, ByVal NOMBRE_MOVIMIENTO As String, ByVal CODIGO_PARTIDO As Decimal, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_NOMBRE_MOVIMIENTO As String, ByVal Original_CODIGO_PARTIDO As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            If (NOMBRE_MOVIMIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE_MOVIMIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE_MOVIMIENTO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_PARTIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            If (Original_NOMBRE_MOVIMIENTO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE_MOVIMIENTO")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_NOMBRE_MOVIMIENTO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE_MOVIMIENTO As String, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_NOMBRE_MOVIMIENTO As String, ByVal Original_CODIGO_PARTIDO As Decimal) As Integer
            Return Me.Update(Original_CODIGO_MOVIMIENTO, NOMBRE_MOVIMIENTO, Original_CODIGO_PARTIDO, Original_CODIGO_MOVIMIENTO, Original_NOMBRE_MOVIMIENTO, Original_CODIGO_PARTIDO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_IMAGENES_CANDIDATOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_IMAGENES_CANDIDATO"
            tableMapping.ColumnMappings.Add("CODIGO_CANDIDATO", "CODIGO_CANDIDATO")
            tableMapping.ColumnMappings.Add("CODIGO_REQUISITO", "CODIGO_REQUISITO")
            tableMapping.ColumnMappings.Add("IMAGEN", "IMAGEN")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_IMAGENES_CANDIDATO"" WHERE ((""CODIGO_CANDIDATO"" = :Original_"& _ 
                "CODIGO_CANDIDATO) AND (""CODIGO_REQUISITO"" = :Original_CODIGO_REQUISITO) AND (""AD"& _ 
                "ICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA"& _ 
                "_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MO"& _ 
                "DIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 "& _ 
                "AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MOD"& _ 
                "IFICACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_IMAGENES_CANDIDATO"" (""CODIGO_CANDIDATO"", ""CODIGO_REQUISITO"""& _ 
                ", ""IMAGEN"", ""ADICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO_POR"", ""FECHA_MODIFICA"& _ 
                "CION"") VALUES (:CODIGO_CANDIDATO, :CODIGO_REQUISITO, :IMAGEN, :ADICIONADO_POR, :"& _ 
                "FECHA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IMAGEN", Global.System.Data.OracleClient.OracleType.Blob, 0, Global.System.Data.ParameterDirection.Input, "IMAGEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_IMAGENES_CANDIDATO"" SET ""CODIGO_CANDIDATO"" = :CODIGO_CANDIDATO, "& _ 
                """CODIGO_REQUISITO"" = :CODIGO_REQUISITO, ""IMAGEN"" = :IMAGEN, ""ADICIONADO_POR"" = :"& _ 
                "ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODIFICADO"& _ 
                "_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION WHERE ((""CODIGO_CANDIDATO"" = :O"& _ 
                "riginal_CODIGO_CANDIDATO) AND (""CODIGO_REQUISITO"" = :Original_CODIGO_REQUISITO) "& _ 
                "AND (""ADICIONADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Origin"& _ 
                "al_FECHA_ADICION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL)"& _ 
                " OR (""MODIFICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICAC"& _ 
                "ION = 1 AND ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_F"& _ 
                "ECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IMAGEN", Global.System.Data.OracleClient.OracleType.Blob, 0, Global.System.Data.ParameterDirection.Input, "IMAGEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_CANDIDATO, CODIGO_REQUISITO, IMAGEN, ADICIONADO_POR, FECHA_ADICION,"& _ 
                " MODIFICADO_POR, FECHA_MODIFICACION FROM TSE.IM_IMAGENES_CANDIDATO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_IMAGENES_CANDIDATODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_IMAGENES_CANDIDATODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_IMAGENES_CANDIDATODataTable = New DSInscripcionCandidatos.IM_IMAGENES_CANDIDATODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_IMAGENES_CANDIDATODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_IMAGENES_CANDIDATO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_CANDIDATO As Decimal, ByVal Original_CODIGO_REQUISITO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_CANDIDATO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_REQUISITO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_CANDIDATO As Decimal, ByVal CODIGO_REQUISITO As Decimal, ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_CANDIDATO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_REQUISITO,Decimal)
            If (IMAGEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IMAGEN")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(IMAGEN,Byte())
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_CANDIDATO As Decimal, ByVal CODIGO_REQUISITO As Decimal, ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_CANDIDATO As Decimal, ByVal Original_CODIGO_REQUISITO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_CANDIDATO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_REQUISITO,Decimal)
            If (IMAGEN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("IMAGEN")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(IMAGEN,Byte())
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CODIGO_CANDIDATO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CODIGO_REQUISITO,Decimal)
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_CANDIDATO As Decimal, ByVal Original_CODIGO_REQUISITO As Decimal, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_CANDIDATO, Original_CODIGO_REQUISITO, IMAGEN, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_CANDIDATO, Original_CODIGO_REQUISITO, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_PARTIDOS_POLITICOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_PARTIDOS_POLITICOS"
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_PARTIDOS_POLITICOS"" WHERE ((""CODIGO_PARTIDO"" = :Original_CO"& _ 
                "DIGO_PARTIDO) AND (""NOMBRE"" = :Original_NOMBRE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_PARTIDOS_POLITICOS"" SET ""CODIGO_PARTIDO"" = :CODIGO_PARTIDO, ""NOM"& _ 
                "BRE"" = :NOMBRE WHERE ((""CODIGO_PARTIDO"" = :Original_CODIGO_PARTIDO) AND (""NOMBRE"& _ 
                """ = :Original_NOMBRE))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NOMBRE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NOMBRE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_PARTIDO, NOMBRE FROM TSE.IM_PARTIDOS_POLITICOS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_PARTIDOS_POLITICOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_PARTIDOS_POLITICOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_PARTIDOS_POLITICOSDataTable = New DSInscripcionCandidatos.IM_PARTIDOS_POLITICOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_PARTIDOS_POLITICOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_PARTIDOS_POLITICOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_NOMBRE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NOMBRE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_PARTIDO As Decimal, ByVal NOMBRE As String, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_NOMBRE As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_PARTIDO,Decimal)
            If (NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NOMBRE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            If (Original_NOMBRE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NOMBRE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_NOMBRE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NOMBRE As String, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_NOMBRE As String) As Integer
            Return Me.Update(Original_CODIGO_PARTIDO, NOMBRE, Original_CODIGO_PARTIDO, Original_NOMBRE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_NIVEL_ELECTIVOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_NIVEL_ELECTIVO"
            tableMapping.ColumnMappings.Add("CODIGO_NIVEL_ELECTIVO", "CODIGO_NIVEL_ELECTIVO")
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TSE"".""IM_NIVEL_ELECTIVO"" WHERE ((""CODIGO_NIVEL_ELECTIVO"" = :Original"& _ 
                "_CODIGO_NIVEL_ELECTIVO) AND (""DESCRIPCION"" = :Original_DESCRIPCION) AND (""ADICIO"& _ 
                "NADO_POR"" = :Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADI"& _ 
                "CION) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFI"& _ 
                "CADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND "& _ 
                """FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFIC"& _ 
                "ACION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TSE"".""IM_NIVEL_ELECTIVO"" (""CODIGO_NIVEL_ELECTIVO"", ""DESCRIPCION"", ""A"& _ 
                "DICIONADO_POR"", ""FECHA_ADICION"", ""MODIFICADO_POR"", ""FECHA_MODIFICACION"") VALUES "& _ 
                "(:CODIGO_NIVEL_ELECTIVO, :DESCRIPCION, :ADICIONADO_POR, :FECHA_ADICION, :MODIFIC"& _ 
                "ADO_POR, :FECHA_MODIFICACION)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TSE"".""IM_NIVEL_ELECTIVO"" SET ""CODIGO_NIVEL_ELECTIVO"" = :CODIGO_NIVEL_ELEC"& _ 
                "TIVO, ""DESCRIPCION"" = :DESCRIPCION, ""ADICIONADO_POR"" = :ADICIONADO_POR, ""FECHA_A"& _ 
                "DICION"" = :FECHA_ADICION, ""MODIFICADO_POR"" = :MODIFICADO_POR, ""FECHA_MODIFICACIO"& _ 
                "N"" = :FECHA_MODIFICACION WHERE ((""CODIGO_NIVEL_ELECTIVO"" = :Original_CODIGO_NIVE"& _ 
                "L_ELECTIVO) AND (""DESCRIPCION"" = :Original_DESCRIPCION) AND (""ADICIONADO_POR"" = "& _ 
                ":Original_ADICIONADO_POR) AND (""FECHA_ADICION"" = :Original_FECHA_ADICION) AND (("& _ 
                ":IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = "& _ 
                ":Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIF"& _ 
                "ICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_NIVEL_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_NIVEL_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CODIGO_NIVEL_ELECTIVO, DESCRIPCION, ADICIONADO_POR, FECHA_ADICION, MODIFIC"& _ 
                "ADO_POR, FECHA_MODIFICACION FROM TSE.IM_NIVEL_ELECTIVO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_NIVEL_ELECTIVODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_NIVEL_ELECTIVODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_NIVEL_ELECTIVODataTable = New DSInscripcionCandidatos.IM_NIVEL_ELECTIVODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_NIVEL_ELECTIVODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_NIVEL_ELECTIVO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_NIVEL_ELECTIVO,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DESCRIPCION,String)
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_NIVEL_ELECTIVO As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_NIVEL_ELECTIVO,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CODIGO_NIVEL_ELECTIVO As Decimal, ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_NIVEL_ELECTIVO,Decimal)
            If (DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCRIPCION,String)
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FECHA_ADICION,Date)
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_CODIGO_NIVEL_ELECTIVO,Decimal)
            If (Original_DESCRIPCION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPCION")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DESCRIPCION,String)
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADICIONADO_POR")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ADICIONADO_POR,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_FECHA_ADICION,Date)
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCRIPCION As String, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Date, ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_CODIGO_NIVEL_ELECTIVO As Decimal, ByVal Original_DESCRIPCION As String, ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Date, ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_CODIGO_NIVEL_ELECTIVO, DESCRIPCION, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, Original_CODIGO_NIVEL_ELECTIVO, Original_DESCRIPCION, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TA_CANDIDATOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TA_CANDIDATOS"
            tableMapping.ColumnMappings.Add("CODIGO_MOVIMIENTO", "CODIGO_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            tableMapping.ColumnMappings.Add("CODIGO_CANDIDATOS", "CODIGO_CANDIDATOS")
            tableMapping.ColumnMappings.Add("NOMBRE", "NOMBRE")
            tableMapping.ColumnMappings.Add("POSICION", "POSICION")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("APELLIDO", "APELLIDO")
            tableMapping.ColumnMappings.Add("CODIGO_DEPARTAMENTO", "CODIGO_DEPARTAMENTO")
            tableMapping.ColumnMappings.Add("CODIGO_MUNICIPIO", "CODIGO_MUNICIPIO")
            tableMapping.ColumnMappings.Add("IDENTIDAD", "IDENTIDAD")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            tableMapping.ColumnMappings.Add("NOMBRE_MOVIMIENTO", "NOMBRE_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("PARTIDO", "PARTIDO")
            tableMapping.ColumnMappings.Add("CARGO", "CARGO")
            tableMapping.ColumnMappings.Add("DEPARTAMENTO", "DEPARTAMENTO")
            tableMapping.ColumnMappings.Add("MUNICIPIO", "MUNICIPIO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO AND (C.CODIGO_PARTIDO = :id_partido)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIE"& _ 
                "NTO, W.NOMBRE_MOVIMIENTO, C.CODIGO_PARTIDO, X.NOMBRE AS PARTIDO, B.CODIGO_CANDID"& _ 
                "ATOS, B.NOMBRE, B.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_CARGO_ELECTIVO, "& _ 
                "ZA.DESCRIPCION AS CARGO, B.APELLIDO, B.CODIGO_DEPARTAMENTO, Y.DESCRIPCION, B.COD"& _ 
                "IGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Z.DESCRIPCION AS MUNICIPIO, B.IDENTIDA"& _ 
                "D, B.ADICIONADO_POR, B.FECHA_ADICION, B.MODIFICADO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            IM_CANDIDATOS_REPETIDOS C, IM_PARTIDOS_POLITICOS X, IM_MOVIMIENTOS"& _ 
                " W, IM_CANDIDATOS B, IM_CARGOS_ELECTIVOS ZA, IM_MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         IM_DEPARTAMENTOS Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        C.CODIGO_PARTIDO = X.CODIGO_PARTIDO AN"& _ 
                "D C.CODIGO_PARTIDO = W.CODIGO_PARTIDO AND C.CODIGO_MOVIMIENTO = W.CODIGO_MOVIMIE"& _ 
                "NTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         C.IDENTIDAD = B.IDENTIDAD AND B.CODIGO_CARGO_"& _ 
                "ELECTIVO = ZA.CODIGO_CARGO_ELECTIVO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPA"& _ 
                "RTAMENTO = Z.CODIGO_DEPARTAMENTO AND B.CODIGO_MUNICIPIO = Z.CODIGO_MUNICIPIO AND"& _ 
                " "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENTO = Y.CODIGO_DEPARTAMENTO AND (X"& _ 
                ".CODIGO_PARTIDO = :id_partido)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIENTO, W.NOMBRE_MOVIMIENTO, C.CODIGO_P"& _ 
                "ARTIDO, X.NOMBRE AS PARTIDO, B.CODIGO_CANDIDATOS, B.NOMBRE, B.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   B.CODIGO_CARGO_ELECTIVO, ZA.DESCRIPCION AS CARGO, B.APELLIDO,"& _ 
                " B.CODIGO_DEPARTAMENTO, Y.DESCRIPCION, B.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      Z.DESCRIPCION AS MUNICIPIO, B.IDENTIDAD, B.ADICIONADO_POR, B.FECHA_ADICION"& _ 
                ", B.MODIFICADO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS_REPETIDO"& _ 
                "S C, IM_PARTIDOS_POLITICOS X, IM_MOVIMIENTOS W, IM_CANDIDATOS B, IM_CARGOS_ELECT"& _ 
                "IVOS ZA, IM_MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IM_DEPARTAMENTOS Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  "& _ 
                "      C.CODIGO_PARTIDO = X.CODIGO_PARTIDO AND C.CODIGO_PARTIDO = W.CODIGO_PARTID"& _ 
                "O AND C.CODIGO_MOVIMIENTO = W.CODIGO_MOVIMIENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         C"& _ 
                ".IDENTIDAD = B.IDENTIDAD AND B.CODIGO_CARGO_ELECTIVO = ZA.CODIGO_CARGO_ELECTIVO "& _ 
                "AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENTO = Z.CODIGO_DEPARTAMENTO AND"& _ 
                " B.CODIGO_MUNICIPIO = Z.CODIGO_MUNICIPIO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO"& _ 
                "_DEPARTAMENTO = Y.CODIGO_DEPARTAMENTO "
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO AND (C.CODIGO_PARTIDO = :id_partido) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (B.CODI"& _ 
                "GO_MOVIMIENTO = :id_movimiento) AND (F.CODIGO_CARGO_ELECTIVO = :id_cargo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIENTO, W.NOMBRE_MOVIMIENTO, C.CODIGO_PARTIDO, X.NO"& _ 
                "MBRE AS PARTIDO, B.CODIGO_CANDIDATOS, B.NOMBRE, B.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "       B.CODIGO_CARGO_ELECTIVO, ZA.DESCRIPCION AS CARGO, B.APELLIDO, B.CODIGO_DE"& _ 
                "PARTAMENTO, Y.DESCRIPCION, B.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Z.DESC"& _ 
                "RIPCION AS MUNICIPIO, B.IDENTIDAD, B.ADICIONADO_POR, B.FECHA_ADICION, B.MODIFICA"& _ 
                "DO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS_REPETIDOS C, IM_PART"& _ 
                "IDOS_POLITICOS X, IM_MOVIMIENTOS W, IM_CANDIDATOS B, IM_CARGOS_ELECTIVOS ZA, IM_"& _ 
                "MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IM_DEPARTAMENTOS Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        C.CODI"& _ 
                "GO_PARTIDO = X.CODIGO_PARTIDO AND C.CODIGO_PARTIDO = W.CODIGO_PARTIDO AND C.CODI"& _ 
                "GO_MOVIMIENTO = W.CODIGO_MOVIMIENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         C.IDENTIDAD ="& _ 
                " B.IDENTIDAD AND B.CODIGO_CARGO_ELECTIVO = ZA.CODIGO_CARGO_ELECTIVO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   B.CODIGO_DEPARTAMENTO = Z.CODIGO_DEPARTAMENTO AND B.CODIGO_MU"& _ 
                "NICIPIO = Z.CODIGO_MUNICIPIO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENT"& _ 
                "O = Y.CODIGO_DEPARTAMENTO AND (X.CODIGO_PARTIDO = :id_partido) AND (W.CODIGO_MOV"& _ 
                "IMIENTO = :id_movimiento) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (ZA.CODIGO_CARGO_ELECTI"& _ 
                "VO = :id_cargo)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_movimiento", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_cargo", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO AND (C.CODIGO_PARTIDO = :id_partido) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (B.CODI"& _ 
                "GO_MOVIMIENTO = :id_movimiento) AND (F.CODIGO_CARGO_ELECTIVO = :id_cargo) AND (D"& _ 
                ".CANTIDAD_DIPUTADOS = :id_depto)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIENTO, W.NO"& _ 
                "MBRE_MOVIMIENTO, C.CODIGO_PARTIDO, X.NOMBRE AS PARTIDO, B.CODIGO_CANDIDATOS, B.N"& _ 
                "OMBRE, B.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_CARGO_ELECTIVO, ZA.DESCRI"& _ 
                "PCION AS CARGO, B.APELLIDO, B.CODIGO_DEPARTAMENTO, Y.DESCRIPCION, B.CODIGO_MUNIC"& _ 
                "IPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Z.DESCRIPCION AS MUNICIPIO, B.IDENTIDAD, B.ADIC"& _ 
                "IONADO_POR, B.FECHA_ADICION, B.MODIFICADO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "     IM_CANDIDATOS_REPETIDOS C, IM_PARTIDOS_POLITICOS X, IM_MOVIMIENTOS W, IM_CA"& _ 
                "NDIDATOS B, IM_CARGOS_ELECTIVOS ZA, IM_MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "IM_DEPARTAMENTOS Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        C.CODIGO_PARTIDO = X.CODIGO_PARTIDO AND C.CODIG"& _ 
                "O_PARTIDO = W.CODIGO_PARTIDO AND C.CODIGO_MOVIMIENTO = W.CODIGO_MOVIMIENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         C.IDENTIDAD = B.IDENTIDAD AND B.CODIGO_CARGO_ELECTIVO "& _ 
                "= ZA.CODIGO_CARGO_ELECTIVO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENTO "& _ 
                "= Z.CODIGO_DEPARTAMENTO AND B.CODIGO_MUNICIPIO = Z.CODIGO_MUNICIPIO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   B.CODIGO_DEPARTAMENTO = Y.CODIGO_DEPARTAMENTO AND (X.CODIGO_P"& _ 
                "ARTIDO = :id_partido) AND (W.CODIGO_MOVIMIENTO = :id_movimiento) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                (ZA.CODIGO_CARGO_ELECTIVO = :id_cargo) AND (Y.CANTIDAD_DIPUTADOS"& _ 
                " = :id_depto)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_movimiento", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_cargo", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_depto", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO AND (C.CODIGO_PARTIDO = :id_partido) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (B.CODI"& _ 
                "GO_MOVIMIENTO = :id_movimiento)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIENTO, W.NOM"& _ 
                "BRE_MOVIMIENTO, C.CODIGO_PARTIDO, X.NOMBRE AS PARTIDO, B.CODIGO_CANDIDATOS, B.NO"& _ 
                "MBRE, B.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_CARGO_ELECTIVO, ZA.DESCRIP"& _ 
                "CION AS CARGO, B.APELLIDO, B.CODIGO_DEPARTAMENTO, Y.DESCRIPCION, B.CODIGO_MUNICI"& _ 
                "PIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Z.DESCRIPCION AS MUNICIPIO, B.IDENTIDAD, B.ADICI"& _ 
                "ONADO_POR, B.FECHA_ADICION, B.MODIFICADO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    IM_CANDIDATOS_REPETIDOS C, IM_PARTIDOS_POLITICOS X, IM_MOVIMIENTOS W, IM_CAN"& _ 
                "DIDATOS B, IM_CARGOS_ELECTIVOS ZA, IM_MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         I"& _ 
                "M_DEPARTAMENTOS Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        C.CODIGO_PARTIDO = X.CODIGO_PARTIDO AND C.CODIGO"& _ 
                "_PARTIDO = W.CODIGO_PARTIDO AND C.CODIGO_MOVIMIENTO = W.CODIGO_MOVIMIENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                         C.IDENTIDAD = B.IDENTIDAD AND B.CODIGO_CARGO_ELECTIVO ="& _ 
                " ZA.CODIGO_CARGO_ELECTIVO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENTO ="& _ 
                " Z.CODIGO_DEPARTAMENTO AND B.CODIGO_MUNICIPIO = Z.CODIGO_MUNICIPIO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                  B.CODIGO_DEPARTAMENTO = Y.CODIGO_DEPARTAMENTO AND (X.CODIGO_PA"& _ 
                "RTIDO = :id_partido) AND (W.CODIGO_MOVIMIENTO = :id_movimiento)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_movimiento", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT        A.CODIGO_MOVIMIENTO, B.NOMBRE_MOVIMIENTO, A.CODIGO_PARTIDO, C.NOMBR"& _ 
                "E AS PARTIDO, A.CODIGO_CANDIDATOS, A.NOMBRE, A.POSICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    A.CODIGO_CARGO_ELECTIVO, F.DESCRIPCION AS CARGO, A.APELLIDO, A.CODIGO_DEPART"& _ 
                "AMENTO, D.DESCRIPCION AS DEPARTAMENTO, A.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      E.DESCRIPCION AS MUNICIPIO, A.IDENTIDAD, A.ADICIONADO_POR, A.FECHA_ADICION"& _ 
                ", A.MODIFICADO_POR, A.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATOS A, IM_CA"& _ 
                "RGOS_ELECTIVOS F, IM_MUNICIPIOS E, IM_DEPARTAMENTOS D, IM_PARTIDOS_POLITICOS C, "& _ 
                "IM_MOVIMIENTOS B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        A.CODIGO_CARGO_ELECTIVO = F.CODIGO_CARGO_ELECTIVO"& _ 
                " AND A.CODIGO_DEPARTAMENTO = E.CODIGO_DEPARTAMENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  A.CODIGO_MUNICIPIO = E.CODIGO_MUNICIPIO AND A.CODIGO_DEPARTAMENTO = D.CODIGO_D"& _ 
                "EPARTAMENTO AND A.CODIGO_PARTIDO = C.CODIGO_PARTIDO AND"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "   A.CODIGO_PARTIDO = B.CODIGO_PARTIDO AND A.CODIGO_MOVIMIENTO = B.CODIGO_MOVIMI"& _ 
                "ENTO AND (C.CODIGO_PARTIDO = :id_partido) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (B.CODI"& _ 
                "GO_MOVIMIENTO = :id_movimiento) AND (F.CODIGO_CARGO_ELECTIVO = :id_cargo) AND (D"& _ 
                ".CANTIDAD_DIPUTADOS = :id_depto) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (E.CODIGO_MUNICI"& _ 
                "PIO = :id_muni)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"UNION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT        C.CODIGO_MOVIMIENTO, W.NOMBRE_MOVIMIENTO, "& _ 
                "C.CODIGO_PARTIDO, X.NOMBRE AS PARTIDO, B.CODIGO_CANDIDATOS, B.NOMBRE, B.POSICION"& _ 
                ", "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_CARGO_ELECTIVO, ZA.DESCRIPCION AS CARGO, B"& _ 
                ".APELLIDO, B.CODIGO_DEPARTAMENTO, Y.DESCRIPCION, B.CODIGO_MUNICIPIO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                Z.DESCRIPCION AS MUNICIPIO, B.IDENTIDAD, B.ADICIONADO_POR, B.FEC"& _ 
                "HA_ADICION, B.MODIFICADO_POR, B.FECHA_MODIFICACION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_CANDIDATO"& _ 
                "S_REPETIDOS C, IM_PARTIDOS_POLITICOS X, IM_MOVIMIENTOS W, IM_CANDIDATOS B, IM_CA"& _ 
                "RGOS_ELECTIVOS ZA, IM_MUNICIPIOS Z, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         IM_DEPARTAMENTOS "& _ 
                "Y"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        C.CODIGO_PARTIDO = X.CODIGO_PARTIDO AND C.CODIGO_PARTIDO = W.COD"& _ 
                "IGO_PARTIDO AND C.CODIGO_MOVIMIENTO = W.CODIGO_MOVIMIENTO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         C.IDENTIDAD = B.IDENTIDAD AND B.CODIGO_CARGO_ELECTIVO = ZA.CODIGO_CARGO"& _ 
                "_ELECTIVO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         B.CODIGO_DEPARTAMENTO = Z.CODIGO_DEPART"& _ 
                "AMENTO AND B.CODIGO_MUNICIPIO = Z.CODIGO_MUNICIPIO AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       "& _ 
                "  B.CODIGO_DEPARTAMENTO = Y.CODIGO_DEPARTAMENTO AND (X.CODIGO_PARTIDO = :id_part"& _ 
                "ido) AND (W.CODIGO_MOVIMIENTO = :id_movimiento) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         ("& _ 
                "ZA.CODIGO_CARGO_ELECTIVO = :id_cargo) AND (Y.CANTIDAD_DIPUTADOS = :id_depto) AND"& _ 
                " (Z.CODIGO_MUNICIPIO = :id_muni)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_partido", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_movimiento", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_cargo", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_depto", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("id_muni", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_MUNICIPIO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fillbypartido(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable, ByVal id_partido As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal id_partido As Decimal) As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy() As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBycargo(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable, ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy4(ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal) As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBydepto(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable, ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal, ByVal id_depto As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(id_depto,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy2(ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal, ByVal id_depto As Decimal) As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(id_depto,Decimal)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBymovimiento(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable, ByVal id_partido As Decimal, ByVal id_movimiento As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal id_partido As Decimal, ByVal id_movimiento As Decimal) As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBymuni(ByVal dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable, ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal, ByVal id_depto As Decimal, ByVal id_muni As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(id_depto,Decimal)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(id_muni,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy3(ByVal id_partido As Decimal, ByVal id_movimiento As Decimal, ByVal id_cargo As Decimal, ByVal id_depto As Decimal, ByVal id_muni As Decimal) As DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(id_partido,Decimal)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(id_movimiento,Decimal)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(id_cargo,Decimal)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(id_depto,Decimal)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(id_muni,Decimal)
            Dim dataTable As DSInscripcionCandidatos.TA_CANDIDATOSDataTable = New DSInscripcionCandidatos.TA_CANDIDATOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_REQUISITOS_X_CANDIDATOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_REQUISITOS_X_CANDIDATO"
            tableMapping.ColumnMappings.Add("CODIGO_CANDIDATO", "CODIGO_CANDIDATO")
            tableMapping.ColumnMappings.Add("CODIGO_PARTIDO", "CODIGO_PARTIDO")
            tableMapping.ColumnMappings.Add("CODIGO_MOVIMIENTO", "CODIGO_MOVIMIENTO")
            tableMapping.ColumnMappings.Add("CODIGO_REQUISITO", "CODIGO_REQUISITO")
            tableMapping.ColumnMappings.Add("CANTIDAD", "CANTIDAD")
            tableMapping.ColumnMappings.Add("IMAGEN", "IMAGEN")
            tableMapping.ColumnMappings.Add("ADICIONADO_POR", "ADICIONADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_ADICION", "FECHA_ADICION")
            tableMapping.ColumnMappings.Add("MODIFICADO_POR", "MODIFICADO_POR")
            tableMapping.ColumnMappings.Add("FECHA_MODIFICACION", "FECHA_MODIFICACION")
            tableMapping.ColumnMappings.Add("ESTADO", "ESTADO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""IM_REQUISITOS_X_CANDIDATO"" WHERE ((""CODIGO_CANDIDATO"" = :Original_CO"& _ 
                "DIGO_CANDIDATO) AND (""CODIGO_PARTIDO"" = :Original_CODIGO_PARTIDO) AND (""CODIGO_M"& _ 
                "OVIMIENTO"" = :Original_CODIGO_MOVIMIENTO) AND (""CODIGO_REQUISITO"" = :Original_CO"& _ 
                "DIGO_REQUISITO) AND ((:IsNull_CANTIDAD = 1 AND ""CANTIDAD"" IS NULL) OR (""CANTIDAD"& _ 
                """ = :Original_CANTIDAD)) AND ((:IsNull_ADICIONADO_POR = 1 AND ""ADICIONADO_POR"" I"& _ 
                "S NULL) OR (""ADICIONADO_POR"" = :Original_ADICIONADO_POR)) AND ((:IsNull_FECHA_AD"& _ 
                "ICION = 1 AND ""FECHA_ADICION"" IS NULL) OR (""FECHA_ADICION"" = :Original_FECHA_ADI"& _ 
                "CION)) AND ((:IsNull_MODIFICADO_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIF"& _ 
                "ICADO_POR"" = :Original_MODIFICADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND"& _ 
                " ""FECHA_MODIFICACION"" IS NULL) OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFI"& _ 
                "CACION)) AND ((:IsNull_ESTADO = 1 AND ""ESTADO"" IS NULL) OR (""ESTADO"" = :Original"& _ 
                "_ESTADO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CANTIDAD", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_ESTADO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ESTADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""IM_REQUISITOS_X_CANDIDATO"" (""CODIGO_CANDIDATO"", ""CODIGO_PARTIDO"", ""C"& _ 
                "ODIGO_MOVIMIENTO"", ""CODIGO_REQUISITO"", ""CANTIDAD"", ""IMAGEN"", ""ADICIONADO_POR"", """& _ 
                "FECHA_ADICION"", ""MODIFICADO_POR"", ""FECHA_MODIFICACION"", ""ESTADO"") VALUES (:CODIG"& _ 
                "O_CANDIDATO, :CODIGO_PARTIDO, :CODIGO_MOVIMIENTO, :CODIGO_REQUISITO, :CANTIDAD, "& _ 
                ":IMAGEN, :ADICIONADO_POR, :FECHA_ADICION, :MODIFICADO_POR, :FECHA_MODIFICACION, "& _ 
                ":ESTADO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IMAGEN", Global.System.Data.OracleClient.OracleType.Blob, 0, Global.System.Data.ParameterDirection.Input, "IMAGEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ESTADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""IM_REQUISITOS_X_CANDIDATO"" SET ""CODIGO_CANDIDATO"" = :CODIGO_CANDIDATO, ""C"& _ 
                "ODIGO_PARTIDO"" = :CODIGO_PARTIDO, ""CODIGO_MOVIMIENTO"" = :CODIGO_MOVIMIENTO, ""COD"& _ 
                "IGO_REQUISITO"" = :CODIGO_REQUISITO, ""CANTIDAD"" = :CANTIDAD, ""IMAGEN"" = :IMAGEN, "& _ 
                """ADICIONADO_POR"" = :ADICIONADO_POR, ""FECHA_ADICION"" = :FECHA_ADICION, ""MODIFICAD"& _ 
                "O_POR"" = :MODIFICADO_POR, ""FECHA_MODIFICACION"" = :FECHA_MODIFICACION, ""ESTADO"" ="& _ 
                " :ESTADO WHERE ((""CODIGO_CANDIDATO"" = :Original_CODIGO_CANDIDATO) AND (""CODIGO_P"& _ 
                "ARTIDO"" = :Original_CODIGO_PARTIDO) AND (""CODIGO_MOVIMIENTO"" = :Original_CODIGO_"& _ 
                "MOVIMIENTO) AND (""CODIGO_REQUISITO"" = :Original_CODIGO_REQUISITO) AND ((:IsNull_"& _ 
                "CANTIDAD = 1 AND ""CANTIDAD"" IS NULL) OR (""CANTIDAD"" = :Original_CANTIDAD)) AND ("& _ 
                "(:IsNull_ADICIONADO_POR = 1 AND ""ADICIONADO_POR"" IS NULL) OR (""ADICIONADO_POR"" ="& _ 
                " :Original_ADICIONADO_POR)) AND ((:IsNull_FECHA_ADICION = 1 AND ""FECHA_ADICION"" "& _ 
                "IS NULL) OR (""FECHA_ADICION"" = :Original_FECHA_ADICION)) AND ((:IsNull_MODIFICAD"& _ 
                "O_POR = 1 AND ""MODIFICADO_POR"" IS NULL) OR (""MODIFICADO_POR"" = :Original_MODIFIC"& _ 
                "ADO_POR)) AND ((:IsNull_FECHA_MODIFICACION = 1 AND ""FECHA_MODIFICACION"" IS NULL)"& _ 
                " OR (""FECHA_MODIFICACION"" = :Original_FECHA_MODIFICACION)) AND ((:IsNull_ESTADO "& _ 
                "= 1 AND ""ESTADO"" IS NULL) OR (""ESTADO"" = :Original_ESTADO)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CANTIDAD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IMAGEN", Global.System.Data.OracleClient.OracleType.Blob, 0, Global.System.Data.ParameterDirection.Input, "IMAGEN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ESTADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CANDIDATO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CANDIDATO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_PARTIDO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_PARTIDO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_MOVIMIENTO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_MOVIMIENTO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_CANTIDAD", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CANTIDAD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CANTIDAD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADICIONADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ADICIONADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_ADICION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_ADICION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MODIFICADO_POR", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MODIFICADO_POR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_FECHA_MODIFICACION", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "FECHA_MODIFICACION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_ESTADO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ESTADO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ESTADO", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CODIGO_CANDIDATO, CODIGO_PARTIDO, CODIGO_MOVIMIENTO, CODIGO_REQUISI"& _ 
                "TO, CANTIDAD, IMAGEN, ADICIONADO_POR, FECHA_ADICION, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "MODIFICADO_POR, FECHA_MODIFICACION, ESTADO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            IM_REQUISITOS_X_CAND"& _ 
                "IDATO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOS_X_CANDIDATODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSInscripcionCandidatos.IM_REQUISITOS_X_CANDIDATODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSInscripcionCandidatos.IM_REQUISITOS_X_CANDIDATODataTable = New DSInscripcionCandidatos.IM_REQUISITOS_X_CANDIDATODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOS_X_CANDIDATODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_REQUISITOS_X_CANDIDATO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CODIGO_CANDIDATO As Decimal, ByVal Original_CODIGO_PARTIDO As Decimal, ByVal Original_CODIGO_MOVIMIENTO As Decimal, ByVal Original_CODIGO_REQUISITO As Decimal, ByVal Original_CANTIDAD As Global.System.Nullable(Of Decimal), ByVal Original_ADICIONADO_POR As String, ByVal Original_FECHA_ADICION As Global.System.Nullable(Of Date), ByVal Original_MODIFICADO_POR As String, ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal Original_ESTADO As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CODIGO_CANDIDATO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CODIGO_REQUISITO,Decimal)
            If (Original_CANTIDAD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CANTIDAD.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ADICIONADO_POR,String)
            End If
            If (Original_FECHA_ADICION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_FECHA_ADICION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTADO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_ESTADO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CODIGO_CANDIDATO As Decimal, ByVal CODIGO_PARTIDO As Decimal, ByVal CODIGO_MOVIMIENTO As Decimal, ByVal CODIGO_REQUISITO As Decimal, ByVal CANTIDAD As Global.System.Nullable(Of Decimal), ByVal IMAGEN() As Byte, ByVal ADICIONADO_POR As String, ByVal FECHA_ADICION As Global.System.Nullable(Of Date), ByVal MODIFICADO_POR As String, ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date), ByVal ESTADO As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CODIGO_CANDIDATO,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CODIGO_PARTIDO,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CODIGO_REQUISITO,Decimal)
            If (CANTIDAD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CANTIDAD.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IMAGEN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(IMAGEN,Byte())
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ADICIONADO_POR,String)
            End If
            If (FECHA_ADICION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FECHA_ADICION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ESTADO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ESTADO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CODIGO_CANDIDATO As Decimal,  _
                    ByVal CODIGO_PARTIDO As Decimal,  _
                    ByVal CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal CODIGO_REQUISITO As Decimal,  _
                    ByVal CANTIDAD As Global.System.Nullable(Of Decimal),  _
                    ByVal IMAGEN() As Byte,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Global.System.Nullable(Of Date),  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal ESTADO As String,  _
                    ByVal Original_CODIGO_CANDIDATO As Decimal,  _
                    ByVal Original_CODIGO_PARTIDO As Decimal,  _
                    ByVal Original_CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal Original_CODIGO_REQUISITO As Decimal,  _
                    ByVal Original_CANTIDAD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Global.System.Nullable(Of Date),  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_ESTADO As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CODIGO_CANDIDATO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CODIGO_PARTIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CODIGO_REQUISITO,Decimal)
            If (CANTIDAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CANTIDAD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (IMAGEN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(IMAGEN,Byte())
            End If
            If (ADICIONADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ADICIONADO_POR,String)
            End If
            If (FECHA_ADICION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FECHA_ADICION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MODIFICADO_POR,String)
            End If
            If (FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ESTADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ESTADO,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CODIGO_CANDIDATO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CODIGO_PARTIDO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CODIGO_MOVIMIENTO,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CODIGO_REQUISITO,Decimal)
            If (Original_CANTIDAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CANTIDAD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ADICIONADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ADICIONADO_POR,String)
            End If
            If (Original_FECHA_ADICION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_FECHA_ADICION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_MODIFICADO_POR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_MODIFICADO_POR,String)
            End If
            If (Original_FECHA_MODIFICACION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_FECHA_MODIFICACION.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ESTADO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ESTADO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CANTIDAD As Global.System.Nullable(Of Decimal),  _
                    ByVal IMAGEN() As Byte,  _
                    ByVal ADICIONADO_POR As String,  _
                    ByVal FECHA_ADICION As Global.System.Nullable(Of Date),  _
                    ByVal MODIFICADO_POR As String,  _
                    ByVal FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal ESTADO As String,  _
                    ByVal Original_CODIGO_CANDIDATO As Decimal,  _
                    ByVal Original_CODIGO_PARTIDO As Decimal,  _
                    ByVal Original_CODIGO_MOVIMIENTO As Decimal,  _
                    ByVal Original_CODIGO_REQUISITO As Decimal,  _
                    ByVal Original_CANTIDAD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ADICIONADO_POR As String,  _
                    ByVal Original_FECHA_ADICION As Global.System.Nullable(Of Date),  _
                    ByVal Original_MODIFICADO_POR As String,  _
                    ByVal Original_FECHA_MODIFICACION As Global.System.Nullable(Of Date),  _
                    ByVal Original_ESTADO As String) As Integer
            Return Me.Update(Original_CODIGO_CANDIDATO, Original_CODIGO_PARTIDO, Original_CODIGO_MOVIMIENTO, Original_CODIGO_REQUISITO, CANTIDAD, IMAGEN, ADICIONADO_POR, FECHA_ADICION, MODIFICADO_POR, FECHA_MODIFICACION, ESTADO, Original_CODIGO_CANDIDATO, Original_CODIGO_PARTIDO, Original_CODIGO_MOVIMIENTO, Original_CODIGO_REQUISITO, Original_CANTIDAD, Original_ADICIONADO_POR, Original_FECHA_ADICION, Original_MODIFICADO_POR, Original_FECHA_MODIFICACION, Original_ESTADO)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_REQUISITOSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_REQUISITOS"
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("CODIGO_REQUISITO", "CODIGO_REQUISITO")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("AUTOMATICO", "AUTOMATICO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""IM_REQUISITOS_X_CARGOS"" WHERE ((""DESCRIPCION"" = :Original_DESCRIPCIO"& _ 
                "N) AND (""CODIGO_REQUISITO"" = :Original_CODIGO_REQUISITO) AND (""CODIGO_CARGO_ELEC"& _ 
                "TIVO"" = :Original_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_AUTOMATICO = 1 AND ""AUTOM"& _ 
                "ATICO"" IS NULL) OR (""AUTOMATICO"" = :Original_AUTOMATICO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_AUTOMATICO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""IM_REQUISITOS_X_CARGOS"" SET ""DESCRIPCION"" = :DESCRIPCION, ""CODIGO_REQUISI"& _ 
                "TO"" = :CODIGO_REQUISITO, ""CODIGO_CARGO_ELECTIVO"" = :CODIGO_CARGO_ELECTIVO, ""AUTO"& _ 
                "MATICO"" = :AUTOMATICO WHERE ((""DESCRIPCION"" = :Original_DESCRIPCION) AND (""CODIG"& _ 
                "O_REQUISITO"" = :Original_CODIGO_REQUISITO) AND (""CODIGO_CARGO_ELECTIVO"" = :Origi"& _ 
                "nal_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_AUTOMATICO = 1 AND ""AUTOMATICO"" IS NULL"& _ 
                ") OR (""AUTOMATICO"" = :Original_AUTOMATICO)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_AUTOMATICO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        DESCRIPCION, CODIGO_REQUISITO, CODIGO_CARGO_ELECTIVO, AUTOMATICO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"F"& _ 
                "ROM            IM_REQUISITOS_X_CARGOS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODIGO_CARGO_ELECTIVO = :ID"& _ 
                "_CARGO) AND (AUTOMATICO = :ID_AUTO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY 1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ID_CARGO", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ID_AUTO", Global.System.Data.OracleClient.OracleType.VarChar, 1, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillBY(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOSDataTable, ByVal ID_CARGO As Decimal, ByVal ID_AUTO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_CARGO,Decimal)
            If (ID_AUTO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ID_CARGO As Decimal, ByVal ID_AUTO As String) As DSInscripcionCandidatos.IM_REQUISITOSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_CARGO,Decimal)
            If (ID_AUTO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTO,String)
            End If
            Dim dataTable As DSInscripcionCandidatos.IM_REQUISITOSDataTable = New DSInscripcionCandidatos.IM_REQUISITOSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_REQUISITOS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class IM_REQUISITOS1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "IM_REQUISITOS1"
            tableMapping.ColumnMappings.Add("DESCRIPCION", "DESCRIPCION")
            tableMapping.ColumnMappings.Add("CODIGO_REQUISITO", "CODIGO_REQUISITO")
            tableMapping.ColumnMappings.Add("CODIGO_CARGO_ELECTIVO", "CODIGO_CARGO_ELECTIVO")
            tableMapping.ColumnMappings.Add("AUTOMATICO", "AUTOMATICO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""IM_REQUISITOS_X_CARGOS"" WHERE ((""DESCRIPCION"" = :Original_DESCRIPCIO"& _ 
                "N) AND (""CODIGO_REQUISITO"" = :Original_CODIGO_REQUISITO) AND (""CODIGO_CARGO_ELEC"& _ 
                "TIVO"" = :Original_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_AUTOMATICO = 1 AND ""AUTOM"& _ 
                "ATICO"" IS NULL) OR (""AUTOMATICO"" = :Original_AUTOMATICO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_AUTOMATICO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""IM_REQUISITOS_X_CARGOS"" SET ""DESCRIPCION"" = :DESCRIPCION, ""CODIGO_REQUISI"& _ 
                "TO"" = :CODIGO_REQUISITO, ""CODIGO_CARGO_ELECTIVO"" = :CODIGO_CARGO_ELECTIVO, ""AUTO"& _ 
                "MATICO"" = :AUTOMATICO WHERE ((""DESCRIPCION"" = :Original_DESCRIPCION) AND (""CODIG"& _ 
                "O_REQUISITO"" = :Original_CODIGO_REQUISITO) AND (""CODIGO_CARGO_ELECTIVO"" = :Origi"& _ 
                "nal_CODIGO_CARGO_ELECTIVO) AND ((:IsNull_AUTOMATICO = 1 AND ""AUTOMATICO"" IS NULL"& _ 
                ") OR (""AUTOMATICO"" = :Original_AUTOMATICO)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_DESCRIPCION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "DESCRIPCION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_REQUISITO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_REQUISITO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CODIGO_CARGO_ELECTIVO", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_AUTOMATICO", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AUTOMATICO", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.Inscripcion_de_Moviemientos.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        DESCRIPCION, CODIGO_REQUISITO, CODIGO_CARGO_ELECTIVO, AUTOMATICO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"F"& _ 
                "ROM            IM_REQUISITOS_X_CARGOS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CODIGO_CARGO_ELECTIVO = :ID"& _ 
                "_CARGO) AND (AUTOMATICO = :ID_AUTO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY 1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ID_CARGO", Global.System.Data.OracleClient.OracleType.Number, 22, Global.System.Data.ParameterDirection.Input, "CODIGO_CARGO_ELECTIVO", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ID_AUTO", Global.System.Data.OracleClient.OracleType.VarChar, 1, Global.System.Data.ParameterDirection.Input, "AUTOMATICO", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillBY(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOS1DataTable, ByVal ID_CARGO As Decimal, ByVal ID_AUTO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_CARGO,Decimal)
            If (ID_AUTO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ID_CARGO As Decimal, ByVal ID_AUTO As String) As DSInscripcionCandidatos.IM_REQUISITOS1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID_CARGO,Decimal)
            If (ID_AUTO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTO,String)
            End If
            Dim dataTable As DSInscripcionCandidatos.IM_REQUISITOS1DataTable = New DSInscripcionCandidatos.IM_REQUISITOS1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSInscripcionCandidatos.IM_REQUISITOS1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSInscripcionCandidatos) As Integer
            Return Me.Adapter.Update(dataSet, "IM_REQUISITOS1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _iM_CANDIDATOSTableAdapter As IM_CANDIDATOSTableAdapter
        
        Private _iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter As IM_CANDIDATOS_PUEDEN_REPETIRTableAdapter
        
        Private _iM_CANDIDATOS_REPETIDOSTableAdapter As IM_CANDIDATOS_REPETIDOSTableAdapter
        
        Private _iM_CARGOS_ELECTIVOSTableAdapter As IM_CARGOS_ELECTIVOSTableAdapter
        
        Private _iM_DEPARTAMENTOSTableAdapter As IM_DEPARTAMENTOSTableAdapter
        
        Private _iM_MUNICIPIOSTableAdapter As IM_MUNICIPIOSTableAdapter
        
        Private _iM_MOVIMIENTOSTableAdapter As IM_MOVIMIENTOSTableAdapter
        
        Private _iM_IMAGENES_CANDIDATOTableAdapter As IM_IMAGENES_CANDIDATOTableAdapter
        
        Private _iM_PARTIDOS_POLITICOSTableAdapter As IM_PARTIDOS_POLITICOSTableAdapter
        
        Private _iM_NIVEL_ELECTIVOTableAdapter As IM_NIVEL_ELECTIVOTableAdapter
        
        Private _iM_REQUISITOS_X_CANDIDATOTableAdapter As IM_REQUISITOS_X_CANDIDATOTableAdapter
        
        Private _iM_REQUISITOSTableAdapter As IM_REQUISITOSTableAdapter
        
        Private _iM_REQUISITOS1TableAdapter As IM_REQUISITOS1TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_CANDIDATOSTableAdapter() As IM_CANDIDATOSTableAdapter
            Get
                Return Me._iM_CANDIDATOSTableAdapter
            End Get
            Set
                Me._iM_CANDIDATOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_CANDIDATOS_PUEDEN_REPETIRTableAdapter() As IM_CANDIDATOS_PUEDEN_REPETIRTableAdapter
            Get
                Return Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter
            End Get
            Set
                Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_CANDIDATOS_REPETIDOSTableAdapter() As IM_CANDIDATOS_REPETIDOSTableAdapter
            Get
                Return Me._iM_CANDIDATOS_REPETIDOSTableAdapter
            End Get
            Set
                Me._iM_CANDIDATOS_REPETIDOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_CARGOS_ELECTIVOSTableAdapter() As IM_CARGOS_ELECTIVOSTableAdapter
            Get
                Return Me._iM_CARGOS_ELECTIVOSTableAdapter
            End Get
            Set
                Me._iM_CARGOS_ELECTIVOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_DEPARTAMENTOSTableAdapter() As IM_DEPARTAMENTOSTableAdapter
            Get
                Return Me._iM_DEPARTAMENTOSTableAdapter
            End Get
            Set
                Me._iM_DEPARTAMENTOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_MUNICIPIOSTableAdapter() As IM_MUNICIPIOSTableAdapter
            Get
                Return Me._iM_MUNICIPIOSTableAdapter
            End Get
            Set
                Me._iM_MUNICIPIOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_MOVIMIENTOSTableAdapter() As IM_MOVIMIENTOSTableAdapter
            Get
                Return Me._iM_MOVIMIENTOSTableAdapter
            End Get
            Set
                Me._iM_MOVIMIENTOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_IMAGENES_CANDIDATOTableAdapter() As IM_IMAGENES_CANDIDATOTableAdapter
            Get
                Return Me._iM_IMAGENES_CANDIDATOTableAdapter
            End Get
            Set
                Me._iM_IMAGENES_CANDIDATOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_PARTIDOS_POLITICOSTableAdapter() As IM_PARTIDOS_POLITICOSTableAdapter
            Get
                Return Me._iM_PARTIDOS_POLITICOSTableAdapter
            End Get
            Set
                Me._iM_PARTIDOS_POLITICOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_NIVEL_ELECTIVOTableAdapter() As IM_NIVEL_ELECTIVOTableAdapter
            Get
                Return Me._iM_NIVEL_ELECTIVOTableAdapter
            End Get
            Set
                Me._iM_NIVEL_ELECTIVOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_REQUISITOS_X_CANDIDATOTableAdapter() As IM_REQUISITOS_X_CANDIDATOTableAdapter
            Get
                Return Me._iM_REQUISITOS_X_CANDIDATOTableAdapter
            End Get
            Set
                Me._iM_REQUISITOS_X_CANDIDATOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_REQUISITOSTableAdapter() As IM_REQUISITOSTableAdapter
            Get
                Return Me._iM_REQUISITOSTableAdapter
            End Get
            Set
                Me._iM_REQUISITOSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property IM_REQUISITOS1TableAdapter() As IM_REQUISITOS1TableAdapter
            Get
                Return Me._iM_REQUISITOS1TableAdapter
            End Get
            Set
                Me._iM_REQUISITOS1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_CANDIDATOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_CANDIDATOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection
                End If
                If ((Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_DEPARTAMENTOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_DEPARTAMENTOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_MUNICIPIOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_MUNICIPIOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_MOVIMIENTOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_MOVIMIENTOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection
                End If
                If ((Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_NIVEL_ELECTIVOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_NIVEL_ELECTIVOTableAdapter.Connection
                End If
                If ((Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection
                End If
                If ((Not (Me._iM_REQUISITOSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_REQUISITOSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_REQUISITOSTableAdapter.Connection
                End If
                If ((Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iM_REQUISITOS1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._iM_REQUISITOS1TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSInscripcionCandidatos, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_DEPARTAMENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_DEPARTAMENTOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_NIVEL_ELECTIVO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_NIVEL_ELECTIVOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_MUNICIPIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_MUNICIPIOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_PARTIDOS_POLITICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_PARTIDOS_POLITICOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_CARGOS_ELECTIVOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_CARGOS_ELECTIVOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_MOVIMIENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_MOVIMIENTOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_PUEDEN_REPETIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_IMAGENES_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_IMAGENES_CANDIDATOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_REPETIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS_X_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSInscripcionCandidatos, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_DEPARTAMENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_DEPARTAMENTOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_NIVEL_ELECTIVO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_NIVEL_ELECTIVOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_MUNICIPIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_MUNICIPIOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_PARTIDOS_POLITICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_PARTIDOS_POLITICOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_CARGOS_ELECTIVOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_CARGOS_ELECTIVOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_MOVIMIENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_MOVIMIENTOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_PUEDEN_REPETIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_IMAGENES_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_IMAGENES_CANDIDATOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_REPETIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS_X_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSInscripcionCandidatos, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS_X_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_REPETIDOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_IMAGENES_CANDIDATO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_IMAGENES_CANDIDATOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS_PUEDEN_REPETIR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_CANDIDATOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_CANDIDATOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_MOVIMIENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_MOVIMIENTOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_REQUISITOS1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_REQUISITOS1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_CARGOS_ELECTIVOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_CARGOS_ELECTIVOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_PARTIDOS_POLITICOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_PARTIDOS_POLITICOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_MUNICIPIOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_MUNICIPIOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_NIVEL_ELECTIVO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_NIVEL_ELECTIVOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.IM_DEPARTAMENTOS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iM_DEPARTAMENTOSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSInscripcionCandidatos) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_CANDIDATOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_DEPARTAMENTOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_MUNICIPIOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_MOVIMIENTOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_NIVEL_ELECTIVOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_REQUISITOSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_REQUISITOSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iM_REQUISITOS1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_CANDIDATOSTableAdapter, Me._iM_CANDIDATOSTableAdapter.Connection)
                    Me._iM_CANDIDATOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_CANDIDATOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_CANDIDATOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_CANDIDATOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter, Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection)
                    Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_CANDIDATOS_REPETIDOSTableAdapter, Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection)
                    Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_CARGOS_ELECTIVOSTableAdapter, Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection)
                    Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CARGOS_ELECTIVOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_CARGOS_ELECTIVOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_CARGOS_ELECTIVOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_CARGOS_ELECTIVOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_DEPARTAMENTOSTableAdapter, Me._iM_DEPARTAMENTOSTableAdapter.Connection)
                    Me._iM_DEPARTAMENTOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_DEPARTAMENTOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_DEPARTAMENTOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_DEPARTAMENTOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_DEPARTAMENTOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_MUNICIPIOSTableAdapter, Me._iM_MUNICIPIOSTableAdapter.Connection)
                    Me._iM_MUNICIPIOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_MUNICIPIOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_MUNICIPIOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_MUNICIPIOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_MUNICIPIOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_MOVIMIENTOSTableAdapter, Me._iM_MOVIMIENTOSTableAdapter.Connection)
                    Me._iM_MOVIMIENTOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_MOVIMIENTOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_MOVIMIENTOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_MOVIMIENTOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_MOVIMIENTOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_IMAGENES_CANDIDATOTableAdapter, Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection)
                    Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_IMAGENES_CANDIDATOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_IMAGENES_CANDIDATOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_IMAGENES_CANDIDATOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_IMAGENES_CANDIDATOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_PARTIDOS_POLITICOSTableAdapter, Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection)
                    Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_PARTIDOS_POLITICOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_PARTIDOS_POLITICOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_PARTIDOS_POLITICOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_PARTIDOS_POLITICOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_NIVEL_ELECTIVOTableAdapter, Me._iM_NIVEL_ELECTIVOTableAdapter.Connection)
                    Me._iM_NIVEL_ELECTIVOTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_NIVEL_ELECTIVOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_NIVEL_ELECTIVOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_NIVEL_ELECTIVOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_NIVEL_ELECTIVOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_REQUISITOS_X_CANDIDATOTableAdapter, Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection)
                    Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_REQUISITOSTableAdapter, Me._iM_REQUISITOSTableAdapter.Connection)
                    Me._iM_REQUISITOSTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_REQUISITOSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_REQUISITOSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_REQUISITOSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iM_REQUISITOS1TableAdapter, Me._iM_REQUISITOS1TableAdapter.Connection)
                    Me._iM_REQUISITOS1TableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOS1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._iM_REQUISITOS1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iM_REQUISITOS1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iM_REQUISITOS1TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._iM_CANDIDATOSTableAdapter) Is Nothing) Then
                    Me._iM_CANDIDATOSTableAdapter.Connection = CType(revertConnections(Me._iM_CANDIDATOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter) Is Nothing) Then
                    Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Connection = CType(revertConnections(Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOS_PUEDEN_REPETIRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_CANDIDATOS_REPETIDOSTableAdapter) Is Nothing) Then
                    Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Connection = CType(revertConnections(Me._iM_CANDIDATOS_REPETIDOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CANDIDATOS_REPETIDOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_CARGOS_ELECTIVOSTableAdapter) Is Nothing) Then
                    Me._iM_CARGOS_ELECTIVOSTableAdapter.Connection = CType(revertConnections(Me._iM_CARGOS_ELECTIVOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_CARGOS_ELECTIVOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_DEPARTAMENTOSTableAdapter) Is Nothing) Then
                    Me._iM_DEPARTAMENTOSTableAdapter.Connection = CType(revertConnections(Me._iM_DEPARTAMENTOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_DEPARTAMENTOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_MUNICIPIOSTableAdapter) Is Nothing) Then
                    Me._iM_MUNICIPIOSTableAdapter.Connection = CType(revertConnections(Me._iM_MUNICIPIOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_MUNICIPIOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_MOVIMIENTOSTableAdapter) Is Nothing) Then
                    Me._iM_MOVIMIENTOSTableAdapter.Connection = CType(revertConnections(Me._iM_MOVIMIENTOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_MOVIMIENTOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_IMAGENES_CANDIDATOTableAdapter) Is Nothing) Then
                    Me._iM_IMAGENES_CANDIDATOTableAdapter.Connection = CType(revertConnections(Me._iM_IMAGENES_CANDIDATOTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_IMAGENES_CANDIDATOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_PARTIDOS_POLITICOSTableAdapter) Is Nothing) Then
                    Me._iM_PARTIDOS_POLITICOSTableAdapter.Connection = CType(revertConnections(Me._iM_PARTIDOS_POLITICOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_PARTIDOS_POLITICOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_NIVEL_ELECTIVOTableAdapter) Is Nothing) Then
                    Me._iM_NIVEL_ELECTIVOTableAdapter.Connection = CType(revertConnections(Me._iM_NIVEL_ELECTIVOTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_NIVEL_ELECTIVOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_REQUISITOS_X_CANDIDATOTableAdapter) Is Nothing) Then
                    Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Connection = CType(revertConnections(Me._iM_REQUISITOS_X_CANDIDATOTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOS_X_CANDIDATOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_REQUISITOSTableAdapter) Is Nothing) Then
                    Me._iM_REQUISITOSTableAdapter.Connection = CType(revertConnections(Me._iM_REQUISITOSTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iM_REQUISITOS1TableAdapter) Is Nothing) Then
                    Me._iM_REQUISITOS1TableAdapter.Connection = CType(revertConnections(Me._iM_REQUISITOS1TableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._iM_REQUISITOS1TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
